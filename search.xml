<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[vue常见问题]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2017/02/22/vue%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="如何让css只在当前组件起作用"><a href="#如何让css只在当前组件起作用" class="headerlink" title="如何让css只在当前组件起作用"></a>如何让css只在当前组件起作用</h3><p>在style标签中加入scoped语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;style scoped&gt;&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p>css支持scss语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;style lang=&quot;scss&quot;&gt;&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<h3 id="v-for遍历数据中的v-bind-key（-key）问题"><a href="#v-for遍历数据中的v-bind-key（-key）问题" class="headerlink" title="v-for遍历数据中的v-bind:key（:key）问题"></a>v-for遍历数据中的v-bind:key（:key）问题</h3><blockquote>
<p>在vue中用v-for最好搭配v-bind:key=”key”来使用；<br>key的作用主要是为了高效的更新虚拟DOM<br>我们知道，vue和react都实现了一套虚拟DOM，使我们可以不直接操作DOM元素，只操作数据便可以重新渲染页面。而隐藏在背后的原理便是其高效的Diff算法。</p>
</blockquote>
<h3 id="props-用来接收父组件传过来的数据"><a href="#props-用来接收父组件传过来的数据" class="headerlink" title="props:{}用来接收父组件传过来的数据"></a>props:{}用来接收父组件传过来的数据</h3><h3 id="引入模块和引入文件"><a href="#引入模块和引入文件" class="headerlink" title="引入模块和引入文件"></a>引入模块和引入文件</h3><p><em>引入模块：import webview from “../../common/webview.js”;
</em>引入文件：import “../../filter/webpFilter.js”;</p>
<h3 id="vue数据绑定支持JS表达式-以后v-for的时候再也不用先在JS中处理一遍数据再绑定了"><a href="#vue数据绑定支持JS表达式-以后v-for的时候再也不用先在JS中处理一遍数据再绑定了" class="headerlink" title="vue数据绑定支持JS表达式(以后v-for的时候再也不用先在JS中处理一遍数据再绑定了)"></a>vue数据绑定支持JS表达式(以后v-for的时候再也不用先在JS中处理一遍数据再绑定了)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; number + 1 &#125;&#125;</div><div class="line">&#123;&#123; ok ? &apos;YES&apos; : &apos;NO&apos; &#125;&#125;</div><div class="line">&#123;&#123; message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125;&#125;</div><div class="line">&lt;div v-bind:id=&quot;&apos;list-&apos; + id&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<h3 id="vue中的index索引值问题"><a href="#vue中的index索引值问题" class="headerlink" title="vue中的index索引值问题"></a>vue中的index索引值问题</h3><p>vue 中$index $key 已经移除了<br>之前可以这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=&quot;example&quot;&gt;</div><div class="line">    &lt;li v-for=&quot;item in items&quot;&gt;</div><div class="line">        &#123;&#123;$index&#125;&#125;</div><div class="line">        &#123;&#123;$key&#125;&#125;</div><div class="line">    &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>
<p>现在已经移除,如果还用的话就会报错:Uncaught ReferenceError: $index is not defined;</p>
<p>现在这样写:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=&quot;example&quot;&gt;</div><div class="line">    &lt;li v-for=&quot;(item,index) in items&quot;&gt;</div><div class="line">        &#123;&#123;item&#125;&#125;</div><div class="line">        &#123;&#123;index&#125;&#125;</div><div class="line">    &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>
<p>第一个参数是值,第二个参数是索引;目的是为了保持和原生的一致;</p>
<h3 id="vue微信分享"><a href="#vue微信分享" class="headerlink" title="vue微信分享"></a>vue微信分享</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>页面中引入微信文件</div><div class="line">&lt;script src=<span class="string">"https://res.wx.qq.com/open/js/jweixin-1.0.0.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="number">2.</span><span class="comment">//微信分享方法相关配置</span></div><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"><span class="keyword">import</span> vueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line"></div><div class="line">    setWxConfig: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        Vue.http.options.emulateJSON = <span class="literal">true</span>;</div><div class="line">        Vue.http.get(<span class="string">'/Api/Activity/GetWeixinAPIConfig?url='</span> + <span class="built_in">window</span>.location.href).then(response =&gt; &#123;</div><div class="line">            <span class="keyword">let</span> weixinConfigData = response.body;</div><div class="line">            wx.config(&#123;</div><div class="line">                debug: <span class="literal">false</span>,</div><div class="line">                appId: weixinConfigData.AppId,</div><div class="line">                timestamp: weixinConfigData.Timestamp,</div><div class="line">                nonceStr: weixinConfigData.NonceStr,</div><div class="line">                signature: weixinConfigData.signature,</div><div class="line">                jsApiList: [</div><div class="line">                    <span class="string">'checkJsApi'</span>,</div><div class="line">                    <span class="string">'onMenuShareTimeline'</span>,</div><div class="line">                    <span class="string">'onMenuShareAppMessage'</span>,</div><div class="line">                    <span class="string">'onMenuShareQQ'</span>,</div><div class="line">                    <span class="string">'onMenuShareWeibo'</span>,</div><div class="line">                    <span class="string">'hideMenuItems'</span>,</div><div class="line">                    <span class="string">'showMenuItems'</span>,</div><div class="line">                    <span class="string">'hideAllNonBaseMenuItem'</span>,</div><div class="line">                    <span class="string">'showAllNonBaseMenuItem'</span>,</div><div class="line">                    <span class="string">'translateVoice'</span>,</div><div class="line">                    <span class="string">'startRecord'</span>,</div><div class="line">                    <span class="string">'stopRecord'</span>,</div><div class="line">                    <span class="string">'onRecordEnd'</span>,</div><div class="line">                    <span class="string">'playVoice'</span>,</div><div class="line">                    <span class="string">'pauseVoice'</span>,</div><div class="line">                    <span class="string">'stopVoice'</span>,</div><div class="line">                    <span class="string">'uploadVoice'</span>,</div><div class="line">                    <span class="string">'downloadVoice'</span>,</div><div class="line">                    <span class="string">'chooseImage'</span>,</div><div class="line">                    <span class="string">'previewImage'</span>,</div><div class="line">                    <span class="string">'uploadImage'</span>,</div><div class="line">                    <span class="string">'downloadImage'</span>,</div><div class="line">                    <span class="string">'getNetworkType'</span>,</div><div class="line">                    <span class="string">'openLocation'</span>,</div><div class="line">                    <span class="string">'getLocation'</span>,</div><div class="line">                    <span class="string">'hideOptionMenu'</span>,</div><div class="line">                    <span class="string">'showOptionMenu'</span>,</div><div class="line">                    <span class="string">'closeWindow'</span>,</div><div class="line">                    <span class="string">'scanQRCode'</span>,</div><div class="line">                    <span class="string">'chooseWXPay'</span>,</div><div class="line">                    <span class="string">'openProductSpecificView'</span>,</div><div class="line">                    <span class="string">'addCard'</span>,</div><div class="line">                    <span class="string">'chooseCard'</span>,</div><div class="line">                    <span class="string">'openCard'</span></div><div class="line">                ]</div><div class="line">            &#125;);</div><div class="line">        &#125;, response =&gt; &#123;</div><div class="line">            <span class="comment">// error callback</span></div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    wxShare(obj) &#123;</div><div class="line">        wx.ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">            wx.onMenuShareAppMessage(&#123;</div><div class="line">                title: obj.shareTitle,</div><div class="line">                desc: obj.descContent,</div><div class="line">                link: obj.lineLink,</div><div class="line">                imgUrl: obj.imgUrl,</div><div class="line">                trigger: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                    <span class="comment">//alert('用户点击发送给朋友');</span></div><div class="line">                &#125;,</div><div class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                    <span class="comment">// alert('已分享');</span></div><div class="line">                &#125;,</div><div class="line">                cancel: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                    <span class="comment">//alert('已取消');</span></div><div class="line">                &#125;,</div><div class="line">                fail: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                    <span class="comment">//  alert(JSON.stringify(res));</span></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            wx.onMenuShareTimeline(&#123;</div><div class="line">                title: obj.shareTitle,</div><div class="line">                desc: obj.descContent,</div><div class="line">                link: obj.lineLink,</div><div class="line">                imgUrl: obj.imgUrl,</div><div class="line">                trigger: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                    <span class="comment">// alert('用户点击分享到朋友圈');</span></div><div class="line">                &#125;,</div><div class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                    <span class="comment">// alert('已分享');</span></div><div class="line">                &#125;,</div><div class="line">                cancel: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                    <span class="comment">// alert('已取消');</span></div><div class="line">                &#125;,</div><div class="line">                fail: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                    <span class="comment">// alert(JSON.stringify(res));</span></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            wx.onMenuShareQQ(&#123;</div><div class="line">                title: obj.shareTitle,</div><div class="line">                desc: obj.descContent,</div><div class="line">                link: obj.lineLink,</div><div class="line">                imgUrl: obj.imgUrl,</div><div class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="comment">// 用户确认分享后执行的回调函数</span></div><div class="line">                &#125;,</div><div class="line">                cancel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="comment">// 用户取消分享后执行的回调函数</span></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="number">3.</span>在指定组件中引入公共微信分享方法文件；就可以调用分享方法</div><div class="line"><span class="keyword">import</span> wechat <span class="keyword">from</span> <span class="string">"../../common/wechat.js"</span>;</div><div class="line">wechat.setWxConfig();</div><div class="line">wechat.wxShare(&#123; </div><div class="line">shareTitle: <span class="string">"惠租车-驾照全球通国家查询"</span>, </div><div class="line">descContent: <span class="string">"[驾照全球通]全球自驾200国，顶级车行认证！"</span>, </div><div class="line">lineLink: location.href, </div><div class="line">imgUrl: <span class="string">"https://cdn-qiniu-app1.huizuche.com/2.6/logo_share.jpg"</span> &#125;);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2017/02/06/ES6/</url>
      <content type="html"><![CDATA[<h3 id="let-const"><a href="#let-const" class="headerlink" title="let  const"></a>let  const</h3><p>let和var类似，let必须先声明后使用，否则会报错；<br>let声明变量，const声明常量；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function kuai()&#123;</div><div class="line">  let n = 5;</div><div class="line">  if(true)&#123;</div><div class="line">    let n = 10;</div><div class="line">  &#125;</div><div class="line">  console.log(n)</div><div class="line">&#125;</div><div class="line">kuai()</div></pre></td></tr></table></figure></p>
<p>上面代码说明let有块级作用域，不同块级相同变量不受影响；</p>
<h3 id="顶层对象的属性和全局变量关系"><a href="#顶层对象的属性和全局变量关系" class="headerlink" title="顶层对象的属性和全局变量关系"></a>顶层对象的属性和全局变量关系</h3><p>ES5中的顶层变量属性和全局变量挂钩，被认为是JS最大的败笔之一，<br>ES6中let，class和const声明的变量不再与顶层对象的属性关联</p>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var promise = new Promise(function (resolve, reject) &#123;</div><div class="line">        console.log(&apos;resolve&apos;);</div><div class="line">		//成功回调</div><div class="line">        resolve();</div><div class="line">		//失败回调</div><div class="line">		reject();</div><div class="line">    &#125;)</div><div class="line">    promise.then(function () &#123;</div><div class="line">        console.log(&apos;success&apos;)</div><div class="line">    &#125;, function () &#123;</div><div class="line">        console.log(&apos;fail&apos;)</div><div class="line">    &#125;)</div><div class="line">    console.log(&apos;justgo&apos;)</div></pre></td></tr></table></figure>
<h3 id="export-default-为模块指定默认输出"><a href="#export-default-为模块指定默认输出" class="headerlink" title="export default {}为模块指定默认输出"></a>export default {}为模块指定默认输出</h3><p>export default function () {<br>  console.log(‘foo’);<br>}<br>其他模块加载该模块时，import命令可以为该匿名函数指定任意名字<br>import customName from ‘./export-default’;</p>
<h3 id="ES6支持方法简写"><a href="#ES6支持方法简写" class="headerlink" title="ES6支持方法简写"></a>ES6支持方法简写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a&#123;</div><div class="line">  points:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">* ES6可以简写为</div><div class="line"><span class="keyword">var</span> a&#123;</div><div class="line">   points()&#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="export-export-default的异同"><a href="#export-export-default的异同" class="headerlink" title="export,export default的异同"></a>export,export default的异同</h3><p>1.export在js中可以有多个，export default只能出现一个；<br>2.在一个文件或模块中，export、import可以有多个，export default仅有一个<br>3.通过export方式导出，在导入时要加{ }，export default则不需要<br>4.export能直接导出变量表达式，export default不行。</p>
<h3 id="ES6的箭头函数"><a href="#ES6的箭头函数" class="headerlink" title="ES6的箭头函数"></a>ES6的箭头函数</h3><p>ES6中的箭头函数写法更加简单，表达更加简洁，简化回调函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> var func = v =&gt; v+1;</div><div class="line">等于：</div><div class="line"> var func = function(v)&#123;return v+1&#125;</div><div class="line"></div><div class="line">var result = [1,2,1,3,4].sort((a,b)=&gt;a-b)</div><div class="line">等于：</div><div class="line">var result = [1,2,1,3,4].sort(function(a,b)&#123;return a-b&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jquery常见问题]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/12/29/jquery%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>###trigger() 方法<br>给指定元素添加触发事件，例：$(“#this”).trigger(“click”)</p>
<p>###jQuery noConflict() 方法<br>noConflict() 方法会释放会 $ 标识符的控制，这样其他脚本就可以使用它了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var jq = $.noConflict();</div><div class="line">jq(document).ready(function()&#123;</div><div class="line">  jq(&quot;button&quot;).click(function()&#123;</div><div class="line">    jq(&quot;p&quot;).text(&quot;jQuery 仍在运行！&quot;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="ready-方法"><a href="#ready-方法" class="headerlink" title="ready()方法"></a>ready()方法</h3><p>当 DOM（文档对象模型） 已经加载，并且页面（包括图像）已经完全呈现时，会发生 ready 事件。</p>
<blockquote>
<p>ready() 函数仅能用于当前文档，因此无需选择器。<br>语法 1<br>$(document).ready(function)<br>语法 2<br>$().ready(function)<br>语法 3<br>$(function)</p>
<ul>
<li>提示：ready() 函数不应与 <body onload=""> 一起使用。</body></li>
</ul>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS常见问题]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/12/26/JS%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="Ajax跨域问题解决"><a href="#Ajax跨域问题解决" class="headerlink" title="Ajax跨域问题解决"></a>Ajax跨域问题解决</h3><p><a href="">http://www.cnblogs.com/pandang/p/5341250.html</a></p>
<h3 id="JS判断浏览器种类IE，FF，Opera-Safari-chrome…"><a href="#JS判断浏览器种类IE，FF，Opera-Safari-chrome…" class="headerlink" title="JS判断浏览器种类IE，FF，Opera,Safari,chrome…"></a>JS判断浏览器种类IE，FF，Opera,Safari,chrome…</h3><p><a href="">http://www.jb51.net/article/50464.htm</a></p>
<p>//基本原理就是根据浏览器的userAgent判断<br>var userAgent = navigator.userAgent;<br>//例如：<br>if (userAgent.indexOf(“Safari”) &gt; -1) {<br>        return “Safari”;<br>} //判断是否Safari浏览器</p>
<h3 id="警告，确认，信息输入弹窗"><a href="#警告，确认，信息输入弹窗" class="headerlink" title="警告，确认，信息输入弹窗"></a>警告，确认，信息输入弹窗</h3><p>alert confirm prompt</p>
<h3 id="encodeURIComponent函数"><a href="#encodeURIComponent函数" class="headerlink" title="encodeURIComponent函数"></a>encodeURIComponent函数</h3><p>1.encodeURIComponent() 函数可把字符串作为 URI 组件进行编码。</p>
<ul>
<li>请注意 encodeURIComponent() 函数 与 encodeURI() 函数的区别之处，前者假定它的参数是 URI 的一部分（比如        协议、主机名、路径或查询字符串）。因此 encodeURIComponent() 函数将转义用于分隔 URI 各个部分的标点符号。</li>
</ul>
<p>###超出指定字符数显示省略号<br>console.log($(“.friend_detail p”).text().length)<br>    var str = $(“.friend_detail p”).text();<br>    var s = str;<br>    if (str.length &gt; 6) {<br>        s = str.substring(0,6) + “…”;<br>    }<br>    $(“.friend_detail p”).text(s);</p>
<h3 id="移动端input被输入法挡住"><a href="#移动端input被输入法挡住" class="headerlink" title="移动端input被输入法挡住"></a>移动端input被输入法挡住</h3><p>scrollIntoView(alignWithTop)</p>
<h3 id="JS监听动画完成事件"><a href="#JS监听动画完成事件" class="headerlink" title="JS监听动画完成事件"></a>JS监听动画完成事件</h3><p>tt.addEventListener(“webkitAnimationEnd”, function(){ //动画结束时事件<br>this.className = this.className.replace(‘change’, ‘ ‘);<br>}, false); </p>
<h3 id="元素scrollTop属性"><a href="#元素scrollTop属性" class="headerlink" title="元素scrollTop属性"></a>元素scrollTop属性</h3><blockquote>
<p>只有元素设置了overflow样式，且不为hidden时才会生效，jquery对象要加下标[index]，否则找不到此属性；</p>
</blockquote>
<h3 id="JS处理Range"><a href="#JS处理Range" class="headerlink" title="JS处理Range"></a>JS处理Range</h3><blockquote>
<p>所谓”Range”，是指HTML文档中任意一段内容。一个Range的起始点和结束点位置任意，甚至起始点和结束点可以是一样的（也就是空Range）。最常见的Range是用户文本选择范围(user text selection)。当用户选择了页面上的某一段文字后，你就可以把这个选择转为Range。当然，你也可以直接用程序定义Range<br>举几个常用的处理Range的方法：<br>1.获取用户选中的文本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var oBtn = document.getElementById(&quot;button&quot;);</div><div class="line">oBtn.onclick = function() &#123;</div><div class="line">    var userSelection, text;</div><div class="line">    if (window.getSelection) &#123; </div><div class="line">        //现代浏览器</div><div class="line">        userSelection = window.getSelection();</div><div class="line">    &#125; else if (document.selection) &#123; </div><div class="line">        //IE浏览器 考虑到Opera，应该放在后面</div><div class="line">        userSelection = document.selection.createRange();</div><div class="line">    &#125;</div><div class="line">    if (!(text = userSelection.text)) &#123;</div><div class="line">        text = userSelection;</div><div class="line">    &#125;</div><div class="line">    alert(text);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>2.点击表单内容全选：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function SelectText(name) &#123;</div><div class="line">	if(obj.createTextRange)&#123;//IE浏览器</div><div class="line">    var range = obj.createTextRange();              </div><div class="line">    range.moveEnd(&quot;character&quot;,结束序号);</div><div class="line">    range.moveStart(&quot;character&quot;, 起始序号);</div><div class="line">    range.select();</div><div class="line">&#125;else&#123;//非IE浏览器</div><div class="line">    obj.setSelectionRange(起始序号, 结束序号);</div><div class="line">    obj.focus();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其他详见张鑫旭博客：<br><a href="">http://www.zhangxinxu.com/wordpress/2011/04/js-range-html%E6%96%87%E6%A1%A3%E6%96%87%E5%AD%97%E5%86%85%E5%AE%B9%E9%80%89%E4%B8%AD%E3%80%81%E5%BA%93%E5%8F%8A%E5%BA%94%E7%94%A8%E4%BB%8B%E7%BB%8D/</a></p>
<h3 id="通过身份证号得到生日，性别，年龄"><a href="#通过身份证号得到生日，性别，年龄" class="headerlink" title="通过身份证号得到生日，性别，年龄"></a>通过身份证号得到生日，性别，年龄</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">//参数UUserCard是身份证号，参数num用来判断要获取什么信息,只取18位身份证号；</div><div class="line">function IdCard(UUserCard,num)&#123;</div><div class="line">   if(num==1)&#123;</div><div class="line">       //获取出生日期</div><div class="line">       birth=UUserCard.substring(6, 10) + &quot;-&quot; + UUserCard.substring(10, 12) + &quot;-&quot; + UUserCard.substring(12, 14);</div><div class="line">    return birth;</div><div class="line">   &#125;</div><div class="line">   if(num==2)&#123;</div><div class="line">       //获取性别（其原理就是取身份证第17位除以2，余数1是男，否则是女）</div><div class="line">       if (parseInt(UUserCard.substr(16, 1)) % 2 == 1) &#123;</div><div class="line">           //男</div><div class="line">     return &quot;男&quot;;</div><div class="line">       &#125; else &#123;</div><div class="line">           //女</div><div class="line">     return &quot;女&quot;;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   if(num==3)&#123;</div><div class="line">        //获取年龄（年龄=当前年-身份证7至10位数字，如果月比当前月小或者月与当前月相等&amp;&amp;日比当前日小于等于，则年龄+1）</div><div class="line">        var myDate = new Date();</div><div class="line">        var month = myDate.getMonth() + 1;</div><div class="line">        var day = myDate.getDate();</div><div class="line">        var age = myDate.getFullYear() - UUserCard.substring(6, 10) - 1;</div><div class="line">        if (UUserCard.substring(10, 12) &lt; month || UUserCard.substring(10, 12) == month &amp;&amp; UUserCard.substring(12, 14) &lt;= day) &#123;</div><div class="line">            age++;</div><div class="line">        &#125;</div><div class="line">  return age;</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line">alert (IdCard(&apos;142223198503226111&apos;,3));</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>###APP环境登录判断<br>        //登录拦截主方法，url:登录成功后跳转链接<br>        CheckLoginAndGoNext: function (url) {<br>            if (!url) {<br>                url = window.location.href;<br>            }<br>            window.hzch5.CheckLogin(url);<br>        },</p>
<pre><code>//登录拦截 第一步：check登录状态
CheckLogin: function (url) {
    if (!url) {
        url = window.location.href;
    }
    $.ajax({
        url: &quot;http://&quot;+window.location.host+&quot;/Account/UserLoginStatus&quot;, type: &quot;POST&quot;, dataType: &quot;json&quot;, success: function (data) {
            if (data.success) {
                window.location = url;
            }
            else {
                window.hzch5.ToLoginPage(url);
            }
        }
    });
},
  //登录拦截 第二步：未登录跳转登录界面（H5/APP)
ToLoginPage: function (url) {
    if (!url) {
        url = window.location.href;
    }
    if (navigator.userAgent.indexOf(&quot;hzc-ios&quot;) &gt; -1 || navigator.userAgent.indexOf(&quot;hzc-android&quot;) &gt; -1) {
        var cver = window.hzch5.getCookie(&quot;cver&quot;); //app版本号
        var token = window.hzch5.getCookie(&quot;token&quot;);
        if (cver) {//2.4版本
            var token = window.hzch5.getCookie(&quot;token&quot;);
            if (token) {
                //根据token同步APP登录状态
                window.hzch5.checkLoginByToken(token, url);
                return false;
            }
            document.location = &quot;WINDOW:HZC:LOGIN&quot;;                   
        }
        else {//小于2.4版本
        document.location = &quot;http://&quot; + window.location.host + &quot;/Account/userLogin?returnurl=&quot; + encodeURIComponent(url);
        }
    }
    else {
        document.location = &quot;http://&quot; + window.location.host + &quot;/Account/userLogin?returnurl=&quot; + encodeURIComponent(url);
    }
},
  //登录拦截 第三步  APP登录状态同步
checkLoginByToken: function (token, url) {
    if (!url) {
        url = window.location.href;
    }
    if (!token) {
        token = window.hzch5.getCookie(&quot;token&quot;);
    }
    $.ajax({
        url: &quot;http://&quot; + window.location.host + &quot;/Account/UserLoginAuto&quot;, type: &quot;POST&quot;, dataType: &quot;json&quot;, data: { token: token }, success: function (data) {
            if (data.success) {
                document.location = &quot;http://&quot; + window.location.host + &quot;/Account/userLogin?returnurl=&quot; + encodeURIComponent(url);
            }
            else {                      
                document.location = &quot;WINDOW:HZC:LOGIN&quot;;
            }
        }
    });
},
//登录拦截 结束
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS控制滚动条刷新位置不变]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/12/01/JS%E6%8E%A7%E5%88%B6%E6%BB%9A%E5%8A%A8%E6%9D%A1%E5%88%B7%E6%96%B0%E4%BD%8D%E7%BD%AE%E4%B8%8D%E5%8F%98/</url>
      <content type="html"><![CDATA[<p>有时候，在网页中点击了页面中的按钮或是刷新了页面后，页面滚动条又 会回到顶部，想看后面的记录就又要拖动滚动条，或者要按翻页键，非常不方便，想在提交页面或者在页面刷新的时候仍然保持滚动条的位置不变，最好的办法就是 在JS中用cookie记录下当前滚动条的位置，然后刷新时读取cookie就可以实现这个功能了。<br>代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">  &lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span>  <span class="title">Trim</span>(<span class="params">strValue</span>)     </span></div><div class="line">    &#123;     </div><div class="line">      <span class="keyword">return</span>   strValue.replace(<span class="regexp">/^s*|s*$/g</span>,<span class="string">""</span>);     </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SetCookie</span>(<span class="params">sName,sValue</span>)     </span></div><div class="line">    &#123;     </div><div class="line">      <span class="built_in">document</span>.cookie = sName + <span class="string">"="</span> + <span class="built_in">escape</span>(sValue);     </div><div class="line">    &#125;   </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">GetCookie</span>(<span class="params">sName</span>)     </span></div><div class="line">    &#123;     </div><div class="line">     <span class="keyword">var</span> aCookie = <span class="built_in">document</span>.cookie.split(<span class="string">";"</span>);     </div><div class="line">     <span class="keyword">for</span>(<span class="keyword">var</span>　i=<span class="number">0</span>;　i　&lt; aCookie.length;　i++)     </div><div class="line">     &#123;     </div><div class="line">       <span class="keyword">var</span> aCrumb = aCookie[i].split(<span class="string">"="</span>);     </div><div class="line">       <span class="keyword">if</span>(sName　== Trim(aCrumb[<span class="number">0</span>]))     </div><div class="line">       &#123;     </div><div class="line">         <span class="keyword">return</span> <span class="built_in">unescape</span>(aCrumb[<span class="number">1</span>]);     </div><div class="line">       &#125;     </div><div class="line">     &#125;     </div><div class="line">     </div><div class="line">     　　<span class="keyword">return</span> <span class="literal">null</span>;     </div><div class="line">   &#125; </div><div class="line">   </div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">scrollback</span>(<span class="params"></span>)     </span></div><div class="line">   &#123;     </div><div class="line">     <span class="keyword">if</span>(GetCookie(<span class="string">"scroll"</span>)!=<span class="literal">null</span>)&#123;<span class="built_in">document</span>.body.scrollTop=GetCookie(<span class="string">"scroll"</span>)&#125;     </div><div class="line">   &#125;     </div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后在html页面中设置<body id="body" onscroll="SetCookie("scroll",body.scrollTop);" onload="scrollback();">就可以在刷新或提交后滚动条的位置保持不变了。</body></p>
<p>上面的是通用的解决方法，在.net中还可以用<pages maintainscrollpositiononpostback="true">这个配置，更容易</pages></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS字符串控制]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/11/30/JS%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E6%95%B0%E7%BB%84%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="split-方法"><a href="#split-方法" class="headerlink" title=".split()方法"></a>.split()方法</h3><blockquote>
<p>stringObject.split(separator,howm)<br>separator: 必需，字符串或正则表达式，以这个字符对应要操作的字符串中的字符分割<br>howm: 可选，返回数组的最大长度</p>
</blockquote>
<h3 id="splice-方法"><a href="#splice-方法" class="headerlink" title=".splice()方法"></a>.splice()方法</h3><blockquote>
<p>array.splice(index,howmany,item1,…..,itemX);<br>参数1必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。，<br>参数2必需。要删除的项目数量。如果设置为 0，则不会删除项目。，<br>参数3可选。向数组添加的新项目。</p>
</blockquote>
<h3 id="slice-方法-可从-已有的数组中返回选定的元素"><a href="#slice-方法-可从-已有的数组中返回选定的元素" class="headerlink" title=".slice()方法   可从  已有的数组中返回选定的元素"></a>.slice()方法   可从  已有的数组中返回选定的元素</h3><blockquote>
<p>包含起始位置，不包含结束位置</p>
</blockquote>
<h3 id="reverse-方法"><a href="#reverse-方法" class="headerlink" title=".reverse()方法"></a>.reverse()方法</h3><blockquote>
<p>arrayPbject.reverse()<br>用于颠倒数组中元素顺序</p>
</blockquote>
<h3 id="join-方法-把数组中的所有元素放入一个字符串"><a href="#join-方法-把数组中的所有元素放入一个字符串" class="headerlink" title=".join()方法  //把数组中的所有元素放入一个字符串"></a>.join()方法  //把数组中的所有元素放入一个字符串</h3><blockquote>
<p>arrayObject.join(separator)<br>参数用来指定要使用的分隔符，默认为逗号</p>
</blockquote>
<h3 id="push-pop-unshift-shift-方法"><a href="#push-pop-unshift-shift-方法" class="headerlink" title=".push(),.pop(),.unshift(),.shift()方法"></a>.push(),.pop(),.unshift(),.shift()方法</h3><p>.push()方法在当前数组末尾添加新元素，返回值为新数组长度；<br>.pop()方法删除当前数组最后一个元素并返回这个元素；<br>.unshift()方法向数组开始位置添加元素；<br>.shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值</p>
<p>###判断电话号码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">validateMobile: <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> reg = <span class="regexp">/^1[3-8]\d&#123;9&#125;$/</span>;</div><div class="line">            <span class="keyword">return</span> reg.test(str);</div><div class="line">        &#125;</div><div class="line"><span class="comment">//邮箱验证</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/</span>;</div></pre></td></tr></table></figure></p>
<h3 id="substr-方法"><a href="#substr-方法" class="headerlink" title=".substr()方法"></a>.substr()方法</h3><p>string.substr(star,length)<br>第一个参数要抽取的字串的起始下标，如果是负数，倒数，<br>第二个参数表示字串字符数</p>
<h3 id="string-substring-方法"><a href="#string-substring-方法" class="headerlink" title="string.substring()方法"></a>string.substring()方法</h3><p>返回介于两个指定下标之间的字符，取第一个参数，不取第二个参数，第二个参数不填，则返回到结尾；</p>
<h3 id="字符串转换数字类型方法"><a href="#字符串转换数字类型方法" class="headerlink" title="字符串转换数字类型方法"></a>字符串转换数字类型方法</h3><p>1.parseInt(),parseFloat()<br>js提供了parseInt()和parseFloat()两个转换函数。前者把值转换成整数，后者把值转换成浮点数。只有对String类型调用这些方法，这两个函数才能正确运行；对其他类型返回的都是NaN(Not a Number)。</p>
<p>2.Number()<br>Number(value)——把给定的值转换成数字（可以是整数或浮点数）；</p>
<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><p>1.利用空数组+空对象push法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function removeArrSame1(arr)&#123;</div><div class="line">	var tmp = &#123;&#125;;</div><div class="line">	var newA = [];</div><div class="line">	for(var i=0;i&lt;arr.length;i++)&#123;</div><div class="line"> 		if(!tmp[arr[i]])&#123;</div><div class="line">			tmp[arr[i]] = 1;</div><div class="line">			newA.push(arr[i]);</div><div class="line">	&#125;</div><div class="line"> &#125;	</div><div class="line"> return newA;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.new一个新数组push方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function removeArrSame2(arr)&#123;</div><div class="line">	var newA = [];</div><div class="line">	for(var i=0;i&lt;arr.length;i++)&#123;</div><div class="line">		if(newA.indexOf(arr[i]) === -1)&#123;</div><div class="line">			newA.push(arr[i])</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return newA;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="字符串大小写互转"><a href="#字符串大小写互转" class="headerlink" title="字符串大小写互转"></a>字符串大小写互转</h3><p>toLocaleUpperCase 方法<br>返回一个字符串，其中所有的字母字符都被转换为大写，同时适应宿主环境的当前区域设置。</p>
<blockquote>
<p>stringVar.tolocaleUpperCase()</p>
</blockquote>
<p>必选的 stringVar 引用是一个 String 对象，值或文字。</p>
<p>说明<br>toLocaleUpperCase 方法转换字符串中的字符，同时适应宿主环境的当前区域设置。在大多数情况下，其结果与利用 toUpperCase 方法所得到的结果是一样的。然而，如果语言规则与常规的 Unicode 大小写映射方式冲突，那么结果就会不同。</p>
<p>toLocaleLowerCase 方法<br>返回一个字符串，其中所有的字母字符都被转换为小写，同时考虑到宿主环境的当前区域设置。</p>
<blockquote>
<p>stringVar.tolocaleLowerCase()</p>
</blockquote>
<p>必选的 stringVar 引用是一个 String 对象，值或文字。</p>
<p>说明<br>toLocaleLowerCase 方法转换字符串中的字符，同时适应宿主环境的当前区域设置。在大多数情况下，其结果与利用 toLowerCase 方法所得到的结果是一样的。然而，如果语言规则与常规的 Unicode 大小写映射方式冲突，那么结果就会不同。</p>
<p>//转换成小写<br>toLowerCase 方法<br>返回一个字符串，该字符串中的字母被转换为小写字母。</p>
<blockquote>
<p>strVariable.toLowerCase()<br>“String Literal”.toLowerCase()</p>
</blockquote>
<p>说明<br>toLowerCase 方法对非字母字符不会产生影响。</p>
<p>下面的示例演示了 of the toLowerCase 方法的效果：</p>
<blockquote>
<p>var strVariable = “This is a STRING object”;<br>strVariable = strVariable.toLowerCase();<br>在执行上一条语句后 strVariable 的值为：</p>
<p>this is a string object</p>
</blockquote>
<p>//转换成大写<br>toUpperCase 方法<br>返回一个字符串，该字符串中的所有字母都被转化为大写字母。</p>
<blockquote>
<p>strVariable.toUpperCase()<br>“String Literal”.toUpperCase()</p>
</blockquote>
<p>说明<br>toUpperCase 方法对非字母字符不会产生影响。</p>
<p>示例<br>下面的示例演示了 toUpperCase 方法的效果：</p>
<blockquote>
<p>var strVariable = “This is a STRING object”;<br>strVariable = strVariable.toUpperCase();</p>
<p>在执行上一条语句后 strVariable 的值为：</p>
<p>THIS IS A STRING OBJECT</p>
</blockquote>
<h3 id="输出图形字符"><a href="#输出图形字符" class="headerlink" title="输出图形字符"></a>输出图形字符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1000</span>;i&lt;<span class="number">10000</span>;i++)</div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(i))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angular中的请求]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/11/28/angular%E4%B8%AD%E7%9A%84%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<h2 id="http"><a href="#http" class="headerlink" title="$http"></a>$http</h2><p>angular提供了$http服务来同服务端进行通信，$http服务队浏览器的XMLHttpRequest对象进行了封装，让我们可以以ajax的方式来从服务器请求数据。<br>$http服务是一个接受一个参数的函数，参数的类型是对象，用来配置生成的http的请求，该函数返回一个promise对象（关于promise规范，可以看看这篇文章）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var promise = $http(&#123;</div><div class="line">  method:&apos;GET&apos;,</div><div class="line">  url:&apos;/api/user.json&apos;</div><div class="line">&#125;);</div><div class="line">promise.then(function(resp)&#123;&#125;, function(resp)&#123;&#125;)</div></pre></td></tr></table></figure>
<p>$http请求的配置对象<br>$http()接受的配置对象可以包含以下属性:</p>
<blockquote>
<p>method:http请求方式，可以为GET,DELETE,HEAD,JSONP,POST,PUT<br>url:字符串，请求的目标<br>params:字符串或者对象，会被转换成为查询字符串追加的url后面<br>data:在发送post请求时使用，作为消息体发送到服务器<br>headers:一个列表，每个元素都是一个函数，返回http头<br>xsrfHeaderName(字符串)：保存XSFR令牌的http头的名称<br>xsrfCookieName:保存XSFR令牌的cookie名称<br>transformRequest:函数或者函数数组，用来对http请求的请求体和头信息进行转换，并返回转换后的结果。<br>transformResponse:函数或者函数数组，用来对http响应的响应体和头信息进行转换，并返回转换后的结果。<br>cache:布尔类型或者缓存对象，设置之后angular会缓存get请求。<br>timeout:数值，延迟请求<br>responseType：字符串，响应类型。可以为arraybuffer, blob,document,json, text, moz-blob, moz-chunked-text, moz-chunked-arraybuffer<br>$http请求的响应对象<br>angular传递给then方法的响应对象包括以下几个属性<br>data:转换之后的响应体<br>status:http响应状态码<br>headers:头信息<br>config:生成原始请求的设置对象<br>statusText:http响应状态的文本</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css3变量]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/11/27/css3%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<p>一、变量是个好东西<br>在任何语言中，变量的有一点作用都是一样的，那就是可以降低维护成本，附带还有更高性能，文件更高压缩率的好处。</p>
<p>随着CSS预编译工具Sass/Less/Stylus的关注和逐渐流行，CSS工作组迅速跟进CSS变量的规范制定，并且，很多浏览器已经跟进，目前，在部分项目中已经可以直接使用了。</p>
<p>Chrome/Firefox/Safari浏览器都是绿油油的，兼容性大大超出我的预期，于是果断尝鲜记录下语法用法和特性。</p>
<p>二、CSS变量var()语法和用法和特性<br>CSS中原生的变量定义语法是：–<em>，变量使用语法是：`var(–</em>)<code>，其中</code>*`表示我们的变量名称。关于命名这个东西，各种语言都有些显示，例如CSS选择器不能是数字开头，JS中的变量是不能直接数值的，但是，在CSS变量中，这些限制通通没有，例如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">:root &#123;</div><div class="line">  --1: #369;</div><div class="line">&#125;</div><div class="line">body &#123;</div><div class="line">  background-color: var(--1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果背景色如下：</p>
<p>但是，不能包含$，[，^，(，%等字符，普通字符局限在只要是“数字[0-9]”“字母[a-zA-Z]”“下划线_”和“短横线-”这些组合，但是可以是中文，日文或者韩文，例如：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  --深蓝: #369;</div><div class="line">  background-color: var(--深蓝);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所以，我们就可以直接使用中文名称作为变量，即使英语4级没过的小伙伴也不会有压力了，我们也不需要随时挂个翻译器在身边了。</p>
<p>无论是变量的定义和使用只能在声明块{}里面，例如，下面这样是无效的：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">--</span>深蓝: <span class="selector-id">#369</span>;</div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--深蓝);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>变量的定义，或者说声明跟CSS计数器的声明类似的，你应该摆脱Sass/Less等预编译工具语法先入为主的语法影响，把CSS的原生变量理解为一种CSS属性。</p>
<p>这样，你就对其权重和变量应用规则要容易理解地多。</p>
<p>例如下面这个例子：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">:root &#123; --color: purple; &#125;</div><div class="line">div &#123; --color: green; &#125;</div><div class="line">#alert &#123; --color: red; &#125;</div><div class="line">* &#123; color: var(--color); &#125;</div><div class="line"></div><div class="line">&lt;p&gt;我的紫色继承于根元素&lt;/p&gt;</div><div class="line">&lt;div&gt;我的绿色来自直接设置&lt;/div&gt;</div><div class="line">&lt;div id='alert'&gt;</div><div class="line">  ID选择器权重更高，因此阿拉是红色！</div><div class="line">  &lt;p&gt;我也是红色，占了继承的光&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>上面这个例子我们可以获得这些信息：</p>
<p>变量也是跟着CSS选择器走的，如果变量所在的选择器和使用变量的元素没有交集，是没有效果的。例如#alert定义的变量，只有id为alert的元素才能享有。如果你想变量全局使用，则你可以设置在:root选择器上；<br>当存在多个同样名称的变量时候，变量的覆盖规则由CSS选择器的权重决定的，但并无!important这种用法，因为没有必要，!important设计初衷是干掉JS的style设置，但对于变量的定义则没有这样的需求。<br>CSS属性名可以走变量吗？</p>
<p>类似下面这样：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">    --bc: background-color;    </div><div class="line">    var(--bc): #369;</div><div class="line">&#125;</div><div class="line">答案是“不可以”，要是可以支持的话，那CSS的压缩可就要逆天了，估计所有的属性都会变成1~2个字符。</div></pre></td></tr></table></figure></p>
<p>CSS变量支持同时多个声明吗？</p>
<p>类似下面这样：<br>…<br>不好意思，类似不了，语法上就根本不支持。</p>
<p>CSS变量使用完整语法<br>CSS变量使用的完整语法为：var( [, ]? )，用中文表示就是：var( &lt;自定义属性名&gt; [, &lt;默认值 ]? )，</p>
<p>意思就是，如果我们使用的变量没有定义（注意，仅限于没有定义），则使用后面的值作为元素的属性值。举个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  --1: #369;</div><div class="line">&#125;</div><div class="line">body &#123;</div><div class="line">  background-color: var(--1, #cd0000);</div><div class="line">&#125;</div><div class="line">则此时的背景色是#cd0000：</div></pre></td></tr></table></figure>
<p>CSS变量不合法的缺省特性</p>
<p>请看下面这个例子：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">--color</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#369</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--color, #cd0000);</div><div class="line">&#125;</div><div class="line">请问，此时&lt;<span class="selector-tag">body</span>&gt;的背景色是？</div><div class="line"></div><div class="line"><span class="selector-tag">A</span>. <span class="selector-tag">transparent</span>    <span class="selector-tag">B</span>. 20<span class="selector-tag">px</span>     <span class="selector-tag">C</span>. <span class="selector-id">#369</span>      <span class="selector-tag">D</span>. <span class="selector-id">#cd0000</span></div><div class="line">答案是…………………………<span class="selector-tag">A</span>. <span class="selector-tag">transparent</span></div></pre></td></tr></table></figure></p>
<p>不知大家答对了没有！</p>
<p>这是CSS变量非常有意思的一个点，对于CSS变量，只要语法是正确的，就算变量里面的值是个乱七八糟的东西，也是会作为正常的声明解析，如果发现变量值是不合法的，例如上面背景色显然不能是20px，则使用背景色的缺省值，也就是默认值代替，于是，上面CSS等同于：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line"><span class="attribute">--color</span>: <span class="number">20px</span>;</div><div class="line"><span class="attribute">background-color</span>: <span class="number">#369</span>;</div><div class="line"><span class="attribute">background-color</span>: transparent;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>千万不能想当然得认为等同于background-color:20px，这也是为什么上面要强调CSS默认值的使用仅限于变量未定义的情况，并不包括变量不合法。</p>
<p>CSS变量的空格尾随特性</p>
<p>请看下面这个例子：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">--size</span>: <span class="number">20</span>;   </div><div class="line">  <span class="attribute">font-size</span>: <span class="built_in">var</span>(--size)<span class="built_in">px</span>;</div><div class="line">&#125;</div><div class="line">请问，此时&lt;<span class="selector-tag">body</span>&gt;的<span class="selector-tag">font-size</span>大小是多少？</div></pre></td></tr></table></figure></p>
<p>如果你以为是20px就太天真了，实际上，此处font-size:var(–size)px等同于font-size:20 px，注意，20后面有个空格，所以，这里的font-size使用的是<body>元素默认的大小。因此，就不要妄图取消就使用一个数值来贯穿全场，还是使用稳妥的做法：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">--size</span>: <span class="number">20px</span>;   </div><div class="line">  <span class="attribute">font-size</span>: <span class="built_in">var</span>(--size);</div><div class="line">&#125;</div><div class="line">或者使用<span class="selector-tag">CSS3</span> <span class="selector-tag">calc</span>()计算：</div><div class="line"></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">--size</span>: <span class="number">20</span>;   </div><div class="line">  <span class="attribute">font-size</span>: <span class="built_in">calc</span>(var(--size) * <span class="number">1px</span>);</div><div class="line">&#125;</div><div class="line">此时，&lt;<span class="selector-tag">body</span>&gt;的<span class="selector-tag">font-size</span>大小才是20<span class="selector-tag">px</span>，</div></pre></td></tr></table></figure></body></p>
<p>CSS变量的相互传递特性</p>
<p>就是说，我们在CSS变量定义的时候可以直接引入其他变量给自己使用，例如：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">--green</span>: <span class="number">#4CAF50</span>;   </div><div class="line">  <span class="attribute">--backgroundColor</span>: <span class="built_in">var</span>(--green);</div><div class="line">&#125;</div><div class="line">或者更复杂的使用<span class="selector-tag">CSS3</span> <span class="selector-tag">calc</span>()计算，例如：</div><div class="line"></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">--columns</span>: <span class="number">4</span>;</div><div class="line">  <span class="attribute">--margins</span>: <span class="built_in">calc</span>(24px / var(--columns));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于复杂布局，CSS变量的这种相互传递和直接引用特性可以简化我们的代码和实现成本，尤其和动态布局在一起的时候，无论是CSS的响应式后者是JS驱动的布局变化。</p>
<p>我们来看一个CSS变量与响应式布局的例子，您可以狠狠地点击这里：CSS变量与响应式布局实例demo</p>
<p>默认进去是4栏，如下图：</p>
<p>随着浏览器宽度减小，4栏可能就变成3栏，2栏甚至1栏，我们实际开发的时候，显然不仅仅是栏目数量变化，宽度小，往往意味着访问设备尺寸有限，此时我们往往会缩小空白间距以及文字字号大小，这样，有限屏幕才能显示更多内容。</p>
<p>也就是说，当我们响应式变化的时候，改变的CSS属性值不是1个，而是3个或者更多，如果我们有3个响应点，是不是就至少需要9个CSS声明？但是，由于我们有了CSS变量，同时，CSS变量可以传递，当我们遭遇响应点的时候，我们只需要改变一个CSS属性值就可以了。</p>
<p>下面就是本demo核心CSS代码（只需要改变–columns这一个变量即可）：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">--columns</span>: <span class="number">4</span>;</div><div class="line">    <span class="attribute">--margins</span>: <span class="built_in">calc</span>(24px / var(--columns));</div><div class="line">    <span class="attribute">--space</span>: <span class="built_in">calc</span>(4px * var(--columns));</div><div class="line">    <span class="attribute">--fontSize</span>: <span class="built_in">calc</span>(20px - 4 / var(--columns));</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">1200px</span>) &#123;</div><div class="line">    <span class="selector-class">.box</span> &#123;</div><div class="line">        <span class="attribute">--columns</span>: <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">900px</span>) &#123;</div><div class="line">    <span class="selector-class">.box</span> &#123;</div><div class="line">        <span class="attribute">--columns</span>: <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">600px</span>) &#123;</div><div class="line">    <span class="selector-class">.box</span> &#123;</div><div class="line">        <span class="attribute">--columns</span>: <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>于是，我们在2栏下的效果就是，字号，间距随着栏目数量的减小也一并减小了，然后每栏之间间距是扩大了;</p>
<p>有没有觉得CSS越来越屌了呢！哈哈~</p>
<p>三、结束语<br>由于目前几乎没有关于CSS3 var()的文章，因此，上面关于var()的语法特性等都是自己通过看规范文档，外加细致的测试得到的。但是，一个人的能力总是有限的，因此，必然还有很多var()变量有意思的点没发现，因此，就希望大家若是发现var()其他有意思的地方，欢迎评论告知，我们及时添加在文章中，方便你我他她它。</p>
<p>多人合作项目我也会使用Less/Sass之类的预编译工具，但是，基本上用到的就是变量，其他高级功能，几乎都不怎么使用。所以，如果浏览器全方位支持了原生的CSS变量，我十有八九就会抛弃Less/Sass之类的工具。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[html常见问题]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/11/25/html%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="标签变为可编辑"><a href="#标签变为可编辑" class="headerlink" title="标签变为可编辑"></a>标签变为可编辑</h3><blockquote>
<p>contenteditable=true</p>
</blockquote>
<p>###textarea标签问题<br>加边框在移动端会出现双边框</p>
<h3 id="img标签中的图片无法显示"><a href="#img标签中的图片无法显示" class="headerlink" title="img标签中的图片无法显示"></a>img标签中的图片无法显示</h3><p>1、让这个图片元素隐藏：<br>onerror=”this.style.display=’none’”/&gt;<br>2、用默认的图片替换：</p>
<ul>
<li>控制onerror事件只触发一次，需要增加这句话：this.onerror=null;<br>onerror=”this.src=’默认图片的url地址;this.onerror=null’”/&gt;</li>
</ul>
<h3 id="input标签在chrome浏览器下背景颜色变黄色的问题"><a href="#input标签在chrome浏览器下背景颜色变黄色的问题" class="headerlink" title="input标签在chrome浏览器下背景颜色变黄色的问题"></a>input标签在chrome浏览器下背景颜色变黄色的问题</h3><p>如图<br><img src="http://ota5i8p1g.bkt.clouddn.com/input.png" alt=""></p>
<p>解决方法：</p>
<blockquote>
<p>方法一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;text&quot;  autocomplete=&quot;off&quot;&gt;，没错，就是给input标签设置禁用自动完成属性；出现黄色背景就是因为启用了自动完成属性；</div></pre></td></tr></table></figure></p>
<p>方法二：<br> -webkit-box-shadow: 0 0 0px 1000px white inset；  没错，就是给input设置内置阴影！而且一定要大，至少要比你的input本身大！不过，box-shadow是很慢的！而且，如果你的input是用图片做背景or，是没有办法做这么干的！</p>
</blockquote>
<h3 id="localstorage"><a href="#localstorage" class="headerlink" title="localstorage"></a>localstorage</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> storage = <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(<span class="string">"CdlformData"</span>)) || &#123;&#125;;  <span class="comment">//从本地取localstorage数据</span></div><div class="line">storage[<span class="string">"DistributionType"</span>] = id;    <span class="comment">//localstorage数据设置key = value;</span></div><div class="line"><span class="built_in">window</span>.localStorage.setItem(<span class="string">'CdlformData'</span>,  <span class="built_in">JSON</span>.stringify(storage));   <span class="comment">// 设置好的数据存到localstorage</span></div></pre></td></tr></table></figure>
<h3 id="h5-video标签"><a href="#h5-video标签" class="headerlink" title="h5 video标签"></a>h5 video标签</h3><blockquote>
<p>自定义播放/暂停,放大，缩小按钮<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>h5 vide<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"playPause()"</span>&gt;</span>播放/暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"makeBig()"</span>&gt;</span>放大<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"makeSmall()"</span>&gt;</span>缩小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"makeNormal()"</span>&gt;</span>普通<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"video1"</span> <span class="attr">width</span>=<span class="string">"420"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"http://huizuche.qiniudn.com/video/USA.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></div><div class="line">    您的浏览器不支持 HTML5 video 标签。</div><div class="line">  <span class="tag">&lt;/<span class="name">video</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> </span></div><div class="line"><span class="keyword">var</span> myVideo=<span class="built_in">document</span>.getElementById(<span class="string">"video1"</span>); </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">playPause</span>(<span class="params"></span>)</span></div><div class="line">&#123; </div><div class="line">	<span class="keyword">if</span> (myVideo.paused) </div><div class="line">	  myVideo.play(); </div><div class="line">	<span class="keyword">else</span> </div><div class="line">	  myVideo.pause(); </div><div class="line">&#125; </div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">makeBig</span>(<span class="params"></span>)</span></div><div class="line">&#123; </div><div class="line">	myVideo.width=<span class="number">560</span>; </div><div class="line">&#125; </div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">makeSmall</span>(<span class="params"></span>)</span></div><div class="line">&#123; </div><div class="line">	myVideo.width=<span class="number">320</span>; </div><div class="line">&#125; </div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">makeNormal</span>(<span class="params"></span>)</span></div><div class="line">&#123; </div><div class="line">	myVideo.width=<span class="number">420</span>; </div><div class="line">&#125; </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo next主题配置优化]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/11/22/hexo-next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="NEXT主题官方文档，操作扩展都非常详细，有兴趣可以看一看"><a href="#NEXT主题官方文档，操作扩展都非常详细，有兴趣可以看一看" class="headerlink" title="NEXT主题官方文档，操作扩展都非常详细，有兴趣可以看一看"></a>NEXT主题官方文档，操作扩展都非常详细，有兴趣可以看一看</h3><p><a href="">http://theme-next.iissnan.com/theme-settings.html</a></p>
<p></p><h2 id="配置"><a name="t4"></a>配置</h2><p></p>
<p></p><p>首先我们看看 <code>站点配置文件</code> 的配置 <code>F:\hexo_config.yml</code> 。</p><p></p>
<pre class="prettyprint" name="code"><code class="hljs avrasm has-numbering"><span class="hljs-preprocessor"># Hexo Configuration</span>
<span class="hljs-preprocessor">## Docs: https://hexo.io/docs/configuration.html</span>
<span class="hljs-preprocessor">## Source: https://github.com/hexojs/hexo/</span>
<span class="hljs-preprocessor"># Site 网站</span>
<span class="hljs-label">title:</span> 为学   <span class="hljs-preprocessor">#网站标题</span>
<span class="hljs-label">subtitle:</span> 天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。   <span class="hljs-preprocessor">#网站副标题</span>
<span class="hljs-label">description:</span> 天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。   <span class="hljs-preprocessor">#网站描述</span>
<span class="hljs-label">author:</span> willxue   <span class="hljs-preprocessor">#您的名字</span>
<span class="hljs-label">language:</span> <span class="hljs-built_in">zh</span>-CN   <span class="hljs-preprocessor">#网站使用的语言</span>
<span class="hljs-label">timezone:</span>           <span class="hljs-preprocessor">#网站时区。Hexo 默认使用您电脑的时区</span>

<span class="hljs-preprocessor"># URL 网址</span>
<span class="hljs-preprocessor">## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span>
<span class="hljs-label">url:</span> http://willxue<span class="hljs-preprocessor">.top</span>
<span class="hljs-label">permalink:</span> :year/:month/:day/:title/    <span class="hljs-preprocessor">#生成文件名字的格式我改成blog/:title:year:month:day/</span>
<span class="hljs-label">permalink_defaults:</span>

<span class="hljs-preprocessor"># Directory 目录配置</span>
<span class="hljs-label">source_dir:</span> source   <span class="hljs-preprocessor">#源文件夹，这个文件夹用来存放内容。</span>
<span class="hljs-label">public_dir:</span> public   <span class="hljs-preprocessor">#公共文件夹，这个文件夹用于存放生成的站点文件。</span>
<span class="hljs-label">tag_dir:</span> tags   <span class="hljs-preprocessor">#标签文件夹</span>
<span class="hljs-label">archive_dir:</span> archives   <span class="hljs-preprocessor">#归档文件夹</span>
<span class="hljs-label">category_dir:</span> categories   <span class="hljs-preprocessor">#分类文件夹</span>
<span class="hljs-label">code_dir:</span> downloads/code    <span class="hljs-preprocessor">#nclude code 文件夹</span>
<span class="hljs-label">i18n_dir:</span> :lang   <span class="hljs-preprocessor">#国际化（i18n）文件夹</span>
<span class="hljs-label">skip_render:</span>   <span class="hljs-preprocessor">#跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</span>

<span class="hljs-preprocessor"># Writing 文章</span>
<span class="hljs-label">new_post_name:</span> :title<span class="hljs-preprocessor">.md</span>   <span class="hljs-preprocessor"># 新建文章默认文件名</span>
<span class="hljs-label">default_layout:</span> post   <span class="hljs-preprocessor"># 默认布局</span>
<span class="hljs-label">titlecase:</span> false   <span class="hljs-preprocessor"># Transform title into titlecase</span>
<span class="hljs-label">external_link:</span> true   <span class="hljs-preprocessor"># 在新标签中打开一个外部链接，默认为true</span>
<span class="hljs-label">filename_case:</span> <span class="hljs-number">0</span>   <span class="hljs-preprocessor">#转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。</span>
<span class="hljs-label">render_drafts:</span> false   <span class="hljs-preprocessor">#是否渲染_drafts目录下的文章，默认为false</span>
<span class="hljs-label">post_asset_folder:</span> false   <span class="hljs-preprocessor">#启动 Asset 文件夹</span>
<span class="hljs-label">relative_link:</span> false   <span class="hljs-preprocessor">#把链接改为与根目录的相对位址，默认false</span>
<span class="hljs-label">future:</span> true   <span class="hljs-preprocessor">#显示未来的文章，默认false</span>
<span class="hljs-label">highlight:</span>   <span class="hljs-preprocessor">#代码块的设置 </span>
  enable: true
  line_number: true
  auto_detect: false
  tab_replace:

<span class="hljs-preprocessor"># Category &amp; Tag   分类和标签的设置</span>
<span class="hljs-label">default_category:</span> uncategorized   <span class="hljs-preprocessor">#默认分类</span>
<span class="hljs-label">category_map:</span>   <span class="hljs-preprocessor">#分类别名</span>
<span class="hljs-label">tag_map:</span>   <span class="hljs-preprocessor">#标签别名</span>

<span class="hljs-preprocessor"># Date / Time format</span>
<span class="hljs-preprocessor">## Hexo uses Moment.js to parse and display date</span>
<span class="hljs-preprocessor">## You can customize the date format as defined in</span>
<span class="hljs-preprocessor">## http://momentjs.com/docs/#/displaying/format/</span>
<span class="hljs-label">date_format:</span> YYYY-MM-DD
<span class="hljs-label">time_format:</span> HH:mm:ss

<span class="hljs-preprocessor"># Pagination 分页</span>
<span class="hljs-preprocessor">## Set per_page to 0 to disable pagination</span>
<span class="hljs-label">per_page:</span> <span class="hljs-number">10</span>   <span class="hljs-preprocessor">#每页显示的文章量 (0 = 关闭分页功能)</span>
<span class="hljs-label">pagination_dir:</span> page   <span class="hljs-preprocessor">#分页目录</span>

<span class="hljs-preprocessor"># Extensions</span>
<span class="hljs-preprocessor">## Plugins: https://hexo.io/plugins/</span>
<span class="hljs-preprocessor">## Themes: https://hexo.io/themes/</span>
<span class="hljs-label">theme:</span> next

<span class="hljs-label">feed:</span>
  type: atom       <span class="hljs-preprocessor">#feed 类型 (atom/rss2)</span>
  path: atom<span class="hljs-preprocessor">.xml</span>   <span class="hljs-preprocessor">#rss 路径</span>
  limit: <span class="hljs-number">20</span>        <span class="hljs-preprocessor">#在 rss 中最多生成的文章数(0显示所有)</span>

<span class="hljs-preprocessor"># Deployment</span>
<span class="hljs-preprocessor">## Docs: https://hexo.io/docs/deployment.html</span>
<span class="hljs-label">deploy:</span> 
<span class="hljs-label">type:</span> git 
  repository: https://github<span class="hljs-preprocessor">.com</span>/imwillxue/imwillxue<span class="hljs-preprocessor">.github</span><span class="hljs-preprocessor">.com</span><span class="hljs-preprocessor">.git</span> 
  branch: master</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css3 animate]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/11/22/css3-animate/</url>
      <content type="html"><![CDATA[<h2 id="animation"><a href="#animation" class="headerlink" title="animation:"></a>animation:</h2><ul>
<li>animation-name : xuanzhuan  //动画名字</li>
<li>animation-duration : 1s ;   //动画时长</li>
<li>animation-timing-function : linear; //动画运动方式</li>
<li>animation-fill-mode : both;  //动画最终停留状态</li>
<li>animation-iteration-count : infinite; //动画运动次数</li>
<li>animation-direction : alternate; //动画来回</li>
<li>animation-delay : 1s;   //动画延迟</li>
<li>animation-play-state : paused  / running;  //给js 用的动画控制</li>
</ul>
<p>$.fn.fullpage.  调用方法</p>
<h2 id="旋转图片：transform"><a href="#旋转图片：transform" class="headerlink" title="旋转图片：transform:"></a>旋转图片：transform:</h2><ul>
<li>旋转：rotateY  rotateZ  rotateX();          (deg)  </li>
<li>放大：scaleX scaleY scaleZ scale scale3d          (1.1)  </li>
<li>斜切：skewX skewY skewZ skew3d          (deg)</li>
<li>位移：translateX translateY  translateZ  translate3d (px)</li>
</ul>
<h2 id="背景图片颜色渐变："><a href="#背景图片颜色渐变：" class="headerlink" title="背景图片颜色渐变："></a>背景图片颜色渐变：</h2><p>   background-image:linear-gradient(#33bb11,#ffaacc)<br>   &lt; linear-gradient&gt;：使用线性渐变创建背景图像。<br>   &lt; radial-gradient&gt;：使用径向(放射性)渐变创建背景图像。<br>   &lt; repeating-linear-gradient&gt;：使用重复的线性渐变创建背景图像。<br>   &lt; repeating-radial-gradient&gt;：使用重复的径向(放射性)渐变创建背景图像</p>
<h2 id="定义一个动画的方法"><a href="#定义一个动画的方法" class="headerlink" title="定义一个动画的方法"></a>定义一个动画的方法</h2><ul>
<li>@keyframes</li>
</ul>
<h2 id="transform-origin-top-center"><a href="#transform-origin-top-center" class="headerlink" title="transform-origin:top center;"></a>transform-origin:top center;</h2><h2 id="永远不要写all-写那些真正需要监测的属性"><a href="#永远不要写all-写那些真正需要监测的属性" class="headerlink" title="永远不要写all 写那些真正需要监测的属性"></a>永远不要写all 写那些真正需要监测的属性</h2><ul>
<li>ease ease-in ease-in-out ease-out ease-out linear step-end step-start steps()</li>
<li>transition-property: all;</li>
<li>transition-duration: .8s;</li>
<li>transition-timing-function: ease;</li>
<li>transition-delay: 0;</li>
</ul>
<h2 id="animation-timing-function-cubic-bezier"><a href="#animation-timing-function-cubic-bezier" class="headerlink" title="animation-timing-function:cubic-bezier();"></a>animation-timing-function:cubic-bezier();</h2><pre><code>both:让动画留在最后一帧；
无限动画：infinite
</code></pre><p>// 进入一屏的时候会调用afterLoad<br>afterLoad:function(name,index){<br>  name是当前这张的名字 index 当前是第几张<br>}<br>// 离开一屏的时候 会调用onLeave<br>onLeave:function(index,next,dir){<br>  if(index === 5){<br>    $(‘#section5 h1’).addClass(‘animate-fei’);<br>  }<br>  if(index === 1){<br>    //离开失效<br>    return false;<br>  }<br>}</p>
<h2 id="四、使用css结合js去制作页面中的动画"><a href="#四、使用css结合js去制作页面中的动画" class="headerlink" title="四、使用css结合js去制作页面中的动画"></a>四、使用css结合js去制作页面中的动画</h2><p>1、使用 transtion 结合fullpage 去制作动画<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">transition:transform .5s ease 1s ,opacity .6s ease-in-out;</div><div class="line">transform:rotateX()</div><div class="line">transform:translate3d(30px,40px,0)</div></pre></td></tr></table></figure></p>
<p>2、使用 animation 结合 fullpage 去制作动画</p>
<p>a.要动的元素写到每一个section中<br>b.正常状态下采用一种动画(可选)<br>c.在section拥有active类的情况下彩另外一种动画<br>d.一些复杂的情况，把动画预先写好， 在配置项的onLeave afterLoad回调函数中通过添加类名</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angular常用过滤器]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/09/27/angular%E5%B8%B8%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="一。表达式中添加过滤器"><a href="#一。表达式中添加过滤器" class="headerlink" title="一。表达式中添加过滤器"></a>一。表达式中添加过滤器</h2><h4 id="过滤器可以通过一个管道字符（-）和一个过滤器添加到表达式中。"><a href="#过滤器可以通过一个管道字符（-）和一个过滤器添加到表达式中。" class="headerlink" title="过滤器可以通过一个管道字符（|）和一个过滤器添加到表达式中。"></a>过滤器可以通过一个管道字符（|）和一个过滤器添加到表达式中。</h4><blockquote>
<ol>
<li><p>uppercase 过滤器将字符串格式化为大写：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名为 &#123;&#123; lastName | uppercase &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>lowercase 过滤器将字符串格式化为小写：</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名为 &#123;&#123; lastName | lowercase &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>currency 过滤器将数字格式化为货币格式：<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>总价 = &#123;&#123; (quantity * price) | currency &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<h2 id="二。向指令添加过滤器"><a href="#二。向指令添加过滤器" class="headerlink" title="二。向指令添加过滤器"></a>二。向指令添加过滤器</h2><blockquote>
<ol>
<li><p>orderBy 过滤器根据表达式排列数组：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"x in names | orderBy:'country'"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>filter 过滤器从数组中选择一个子集：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$scope.names = [</div><div class="line">       &#123;'name':'jack','country':'china','sex':'man'&#125;,</div><div class="line">       &#123;'name':'nick','country':'austrilear','sex':'woman'&#125;,</div><div class="line">       &#123;'name':'rose','country':'rouma','sex':'man'&#125;</div><div class="line">    ];</div><div class="line">  &#125;)</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"x in names | filter:test | orderBy:'country'"</span>&gt;</span></div><div class="line">    &#123;&#123; (x.name | uppercase) + ', ' + x.country &#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<p>###limitTo过滤器：用来控制显示在页面的数量<br>ng-repeat:v in data | limitTo:15</p>
<p>###angularJS中的ng-bind-html指令和$sce服务<br>把$sce封装成一个过滤器就可以在模板上随时调用了</p>
<p>app.filter(‘to_trusted’, [‘$sce’, function ($sce) {<br>return function (text) {<br>    return $sce.trustAsHtml(text);<br>};</p>
<p></p><p ng-bind-html="currentWork.description | to_trusted"></p><br>其中$sce是angularJS自带的安全处理模块，$sce.trustAsHtml(input)方法便是将数据内容以html的形式进行解析并返回。将此过滤器添加到ng-bind-html所绑定的数据中，便实现了在数据加载时对于html标签的自动转义。<p></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[swiper插件]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/09/19/swiper%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>需求环境：移动端环境，swiper.css, swiper.js, 如果用jquery的话，可以用jquery.js和swiper.jquery.js<br>以前也用过swiper做轮播，但是好多参数都不清楚，所以在这总结一下,有新的发现会更新<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"swiper.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-class">.swiper-container</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-wrapper"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>Slide 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>Slide 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>Slide 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 如果需要分页器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 如果需要导航按钮 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-prev"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-next"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 如果需要滚动条 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;div class="swiper-scrollbar"&gt;&lt;/div&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 导航等组件可以放在container之外 --&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"swiper.jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper (<span class="string">'.swiper-container'</span>, &#123;</div><div class="line">    <span class="comment">// direction: 'vertical',</span></div><div class="line">    loop: <span class="literal">true</span>,</div><div class="line">    autoplay: <span class="number">3000</span>,</div><div class="line">    <span class="comment">//如果需要小圆点可点击</span></div><div class="line">    paginationClickable: <span class="literal">true</span>,</div><div class="line">    <span class="comment">//如果小圆点要变成数字(分式)，例如 1/3</span></div><div class="line">    <span class="comment">// paginationType: 'fraction',</span></div><div class="line">    <span class="comment">// 如果需要分页器</span></div><div class="line">    pagination: <span class="string">'.swiper-pagination'</span>,</div><div class="line">    </div><div class="line">    <span class="comment">// 如果需要前进后退按钮</span></div><div class="line">    nextButton: <span class="string">'.swiper-button-next'</span>,</div><div class="line">    prevButton: <span class="string">'.swiper-button-prev'</span>,</div><div class="line">    <span class="comment">//滑动后停止轮播问题：</span></div><div class="line">    autoplayDisableOnInteraction : <span class="literal">false</span>,</div><div class="line">    <span class="comment">// 如果需要滚动条</span></div><div class="line">    <span class="comment">// scrollbar: '.swiper-scrollbar',</span></div><div class="line">  &#125;)</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常用的git命令]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/09/18/%E5%B8%B8%E7%94%A8%E7%9A%84git%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="关于git的几个专用名词"><a href="#关于git的几个专用名词" class="headerlink" title="关于git的几个专用名词"></a>关于git的几个专用名词</h3><ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<h3 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h3><pre><code>//在当前目录新建一个git代码库
$ git init

//克隆一个项目
$ git clone https://github.com/gxhpersonal/blog.git
</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<pre><code>// 设置提交代码时的用户信息
git config --global user.name &quot;gxhpersonal&quot;
git config --global user.email &quot;991158744@qq.com&quot;
</code></pre><h3 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h3><pre><code>//添加当前目录的所有文件到暂存区
$ git add .

//添加每个变化前，都会要求确认
//对于同一个文件的多处变化，可以实现分次提交
$ git add -p

//删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

//改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
</code></pre><h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><pre><code>//提交暂存区到仓库区
$ git commit -m &quot;改的内容标题&quot;

//提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a
</code></pre><h3 id="新建的分支push到远程服务器上"><a href="#新建的分支push到远程服务器上" class="headerlink" title="新建的分支push到远程服务器上"></a>新建的分支push到远程服务器上</h3><pre><code>$ git push -u origin [分支名]
</code></pre><h3 id="远程代码取到本地"><a href="#远程代码取到本地" class="headerlink" title="远程代码取到本地"></a>远程代码取到本地</h3><pre><code>$ git pull
</code></pre><h3 id="本地代码提交到远程仓库"><a href="#本地代码提交到远程仓库" class="headerlink" title="本地代码提交到远程仓库"></a>本地代码提交到远程仓库</h3><pre><code>$ git push
</code></pre><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><pre><code> //列出所有本地分支
$ git branch

//列出所有远程分支
$ git branch -r

//列出所有本地分支和远程分支
$ git branch -a

//新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

//新建一个分支，并切换到该分支
$ git checkout -b [branch]

//切换到指定分支，并更新工作区
$ git checkout [branch-name]

//切换到上一个分支
$ git checkout -

//合并指定分支到当前分支
$ git merge [branch]

//选择一个commit，合并进当前分支
$ git cherry-pick [commit]

//删除分支
$ git branch -d [branch-name]
</code></pre><h3 id="指定某个commit到指定的分支"><a href="#指定某个commit到指定的分支" class="headerlink" title="指定某个commit到指定的分支"></a>指定某个commit到指定的分支</h3><p>1.执行git log -3 –graph test，查看test分支下的commit:</p>
<p>注：commit 后面的hash值代表某个commit，这里把”2e1ada53819d46557b24ee7376dc61d37a06939d“这个commit提交到master。<br>2.执行git checkout master，切换到master分支。</p>
<p>3.执行 git cherry-pick 2e1ada53819d46557b24ee7376dc61d37a06939d，该commit便被提交到了master分支。</p>
<p>到此，”2e1ada53819d46557b24ee7376dc61d37a06939d“这个commit便被提交到了master分支。</p>
<h3 id="git提交GitHub代码不再需要每次commit输入username和password解决"><a href="#git提交GitHub代码不再需要每次commit输入username和password解决" class="headerlink" title="git提交GitHub代码不再需要每次commit输入username和password解决"></a>git提交GitHub代码不再需要每次commit输入username和password解决</h3><p>1.在命令行输入命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global credential.helper store</div></pre></td></tr></table></figure></p>
<p>☞ 这一步会在用户目录下的.gitconfig文件最后添加:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[credential]</div><div class="line">    helper = store</div></pre></td></tr></table></figure></p>
<p>2.现在push你的代码 (git push), 这时会让你输入用户名密码, 这一步输入的用户名密码会被记住, 下次再push代码时就不用输入用户名密码啦!<br>☞这一步会在用户目录下生成文件.git-credential 用来记录用户名密码的信息.<br>☞ git config –global 命令实际上在操作用户目录下的.gitconfig文件, 我们cat一下此文件(cat .gitconfig), 其内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[user]</div><div class="line"> name = alice</div><div class="line"> email = alice@aol.com</div><div class="line">[push]</div><div class="line"> default = simple</div><div class="line">[credential]</div><div class="line"> helper = store</div></pre></td></tr></table></figure></p>
<ul>
<li>拓展：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git config --global user.email &quot;alice@aol.com&quot; 操作的就是上面的email</div><div class="line">git config --global push.default matching 操作的就是上面的push段中的default字段</div><div class="line">git config --global credential.helper store 操作的就是上面最后一行的值</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Markdown语法]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/09/18/Markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>标题是每篇文章需要也是最常用的格式，在Markdown中，如果一段文字被定义为标题，只要在这段文字前加 <code>#</code> 号即可。<br><code># 一级标题</code><br>…<br><code>###### 六级标题</code></p>
<blockquote>
<p>以此类推，建议在 <code>#</code> 号后面加上一个空格，这是最标准的Markdown语法。</p>
</blockquote>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>在Markdown下，列表的显示只需要在文字前加上 <code>-</code> 或 <code>*</code> 即可变为无序列表，有序列表则直接在文字前加 <code>1.</code> <code>2.</code> <code>3.</code> 符号要和文字之间加上一个字符的空格。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>如果需要引用一小段别处的句子，那么可以用引用的格式。<br>只需要在文本钱加入 <code>&gt;</code> 这种大于号即可。</p>
<blockquote>
<p>例如这样</p>
</blockquote>
<h2 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h2><p>插入链接与插入图片的语法很像，区别在一个 <code>!</code> 号。<br>图片为： <code>![](){ImgCap}{/ImgCap}</code><br>链接为： <code>[]()</code><br>插入图片的地址需要图床，推荐使用<a href="https://portal.qiniu.com" target="_blank" rel="external">七牛云</a>，生成URL地址即可。</p>
<h2 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h2><p>Markdown的粗体和斜体也非常简单，用左右各两个 <code>*</code> 或 <code>_</code> 包含一段文本就是粗体的语法，用一个 <code>*</code> 或 <code>_</code> 包含一段文本就是斜体的语法。</p>
<p><strong>这是粗体</strong> <strong>这是粗体</strong><br><em>这是斜体</em>   <em>这是斜体</em></p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>例如：</p>
<blockquote>
<p><strong>| 表头           | 表头                 | 表头l         |</strong><br><strong>| ————-  |:————-:      | —–:       |</strong><br><strong>| 默认左对齐      | 左右各：居中对齐      | 右一个：右对齐 |</strong><br><strong>| 默认左对齐      | 左右各：居中对齐      | 右一个：右对齐 |</strong><br><strong>| 默认左对齐      | 左右各：居中对齐      | 右一个：右对齐 |</strong></p>
</blockquote>
<table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Are</th>
<th style="text-align:right">Cool</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>分割线的语法只需要三个 <code>*</code> 号，例如：</p>
<hr>
<h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>代码区块也是非常常用的一种标记语法，语法非常简单，只需在代码前面加4个空格或1个制表符(tab),例如：<br>    这是一个代码区块</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于定位]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/09/14/%E5%85%B3%E4%BA%8E%E5%AE%9A%E4%BD%8D/</url>
      <content type="html"><![CDATA[<h3 id="关于弹层问题"><a href="#关于弹层问题" class="headerlink" title="关于弹层问题"></a>关于弹层问题</h3><blockquote>
<p>如果有两个模块，这两个模块同时需要浮动，并且没法嵌套；</p>
</blockquote>
<h3 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h3><blockquote>
<p>相对定位：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">position:relative;</div><div class="line">top:50%;</div><div class="line">left:50%;</div><div class="line">transform:translate(-50%,-50%); //如果是图片的话，会造成图片模糊</div></pre></td></tr></table></figure></p>
</blockquote>
<p>或者：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">position:relative;</div><div class="line">left:50%;</div><div class="line">margin-left:自身宽度/2;</div></pre></td></tr></table></figure></p>
<p>绝对定位：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</div><div class="line"><span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</div><div class="line"><span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</div><div class="line"><span class="selector-tag">bottom</span><span class="selector-pseudo">:0</span>;</div><div class="line"><span class="selector-tag">right</span><span class="selector-pseudo">:0</span>;</div><div class="line"><span class="selector-tag">margin</span><span class="selector-pseudo">:auto</span>;</div><div class="line">或者：</div><div class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</div><div class="line">    <span class="selector-tag">top</span>: 50%;</div><div class="line">    <span class="selector-tag">left</span>: 50%;</div><div class="line">    <span class="selector-tag">margin-top</span>: 负的元素高度一半;</div><div class="line">    <span class="selector-tag">margin-left</span>: 负的元素宽度一半;</div></pre></td></tr></table></figure></p>
<h3 id="文字与图片不能垂直居中对齐"><a href="#文字与图片不能垂直居中对齐" class="headerlink" title="文字与图片不能垂直居中对齐"></a>文字与图片不能垂直居中对齐</h3><blockquote>
<p>给图片添加css样式<br> vertical-align:text-bottom；</p>
</blockquote>
<p> vertical-align只适用于行内块元素</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[window.location]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/09/14/window.location/</url>
      <content type="html"><![CDATA[<h3 id="window-location"><a href="#window-location" class="headerlink" title="window.location"></a>window.location</h3><blockquote>
<p>返回（当前页面的）整个 URL：<br>console.log(location.href)</p>
</blockquote>
<p>返回当前 URL 的路径名：<br>console.log(location.pathname);</p>
<p>加载一个新的文档：<br>window.location.assign(“<a href="http://www.w3school.com.cn" target="_blank" rel="external">http://www.w3school.com.cn</a>“)</p>
<p>  ● location.hostname 返回 web 主机的域名<br>  ● location.pathname 返回当前页面的路径和文件名<br>  ● location.port 返回 web 主机的端口 （80 或 443）<br>  ● location.protocol 返回所使用的 web 协议（http:// 或 https://）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[call()和apply()]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/09/14/call()%E5%92%8Capply()/</url>
      <content type="html"><![CDATA[<h3 id="call-和apply"><a href="#call-和apply" class="headerlink" title="call()和apply()"></a>call()和apply()</h3><blockquote>
<p>1、方法定义<br>call方法:<br>语法：call([thisObj[,arg1[, arg2[,   [,.argN]]]]])<br>定义：调用一个对象的一个方法，以另一个对象替换当前对象。<br>说明：<br>call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。<br>如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。 </p>
</blockquote>
<p>apply方法：<br>语法：apply([thisObj[,argArray]])<br>定义：应用某一对象的一个方法，用另一个对象替换当前对象。<br>说明：<br>如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。<br>如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。</p>
<p>2、常用实例<br>a、<br>Javascript代码<br>  function add(a,b)<br>  {<br>       alert(a+b);<br>   }<br>   function sub(a,b)<br>   {<br>       alert(a-b);<br>   }  </p>
<p>   add.call(sub,3,1);<br> 这个例子中的意思就是用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4); // 注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。</p>
<p>b、<br>Javascript代码<br>   function Animal(){<br>       this.name = “Animal”;<br>       this.showName = function(){<br>           alert(this.name);<br>       }<br>   }    </p>
<p>   function Cat(){<br>       this.name = “Cat”;<br>   }    </p>
<p>   var animal = new Animal();<br>   var cat = new Cat();    </p>
<p>   //通过call或apply方法，将原本属于Animal对象的showName()方法交给对象cat来使用了。<br>   //输入结果为”Cat”<br>   animal.showName.call(cat,”,”);<br>   //animal.showName.apply(cat,[]);<br> call 的意思是把 animal 的方法放到cat上执行，原来cat是没有showName() 方法，现在是把animal 的showName()方法放到 cat上来执行，所以this.name 应该是 Cat</p>
<p>c、实现继承<br>Javascript代码<br>   function Animal(name){<br>       this.name = name;<br>       this.showName = function(){<br>           alert(this.name);<br>       }<br>   }      </p>
<p>   function Cat(name){<br>       Animal.call(this, name);<br>   }      </p>
<p>   var cat = new Cat(“Black Cat”);<br>   cat.showName();<br> Animal.call(this) 的意思就是使用 Animal对象代替this对象，那么 Cat中不就有Animal的所有属性和方法了吗，Cat对象就能够直接调用Animal的方法以及属性了.</p>
<p>d、多重继承<br>Javascript代码<br>   function Class10()<br>   {<br>       this.showSub = function(a,b)<br>       {<br>           alert(a-b);<br>       }<br>   }  </p>
<p>   function Class11()<br>   {<br>       this.showAdd = function(a,b)<br>       {<br>           alert(a+b);<br>       }<br>   }  </p>
<p>   function Class2()<br>   {<br>       Class10.call(this);<br>       Class11.call(this);<br>   }<br> 很简单，使用两个 call 就实现多重继承了<br>当然，js的继承还有其他方法，例如使用原型链，这个不属于本文的范畴，只是在此说明call 的用法。说了call ，当然还有 apply，这两个方法基本上是一个意思，区别在于 call 的第二个参数可以是任意类型，而apply的第二个参数必须是数组，也可以是arguments<br>还有 callee，caller..</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[判断android和ios]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/09/14/%E5%88%A4%E6%96%ADandroid%E5%92%8Cios/</url>
      <content type="html"><![CDATA[<h3 id="与APP交互"><a href="#与APP交互" class="headerlink" title="与APP交互"></a>与APP交互</h3><p>很多时候APP中会嵌套H5的页面，这个时候与APP的交互就显得尤为重要，一般我们与APP交互会在window对象下构造一个共用函数，并且需要时返回指定约定的值，APP那边会根据约定的值去执行相应的操作，从而达到交互的目的；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如：window.nativeBack = function()&#123;return 1&#125;</span></div></pre></td></tr></table></figure></p>
<h3 id="判断android和ios"><a href="#判断android和ios" class="headerlink" title="判断android和ios"></a>判断android和ios</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> browser = &#123;</div><div class="line">versions: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> u = navigator.userAgent, app = navigator.appVersion;</div><div class="line"><span class="keyword">return</span> &#123; <span class="comment">//移动终端浏览器版本信息 </span></div><div class="line">ios: !!u.match(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>), <span class="comment">//ios终端 </span></div><div class="line">android: u.indexOf(<span class="string">'Android'</span>) &gt; <span class="number">-1</span> || u.indexOf(<span class="string">'Linux'</span>) &gt; <span class="number">-1</span>, <span class="comment">//android终端或uc浏览器 </span></div><div class="line">iPhone: u.indexOf(<span class="string">'iPhone'</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否为iPhone或者QQHD浏览器 </span></div><div class="line">iPad: u.indexOf(<span class="string">'iPad'</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否iPad </span></div><div class="line">&#125;;</div><div class="line">&#125;(),</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (browser.versions.iPhone || browser.versions.iPad || browser.versions.ios) &#123;</div><div class="line"><span class="comment">//说明是ios系统</span></div><div class="line"><span class="built_in">window</span>.location.href=<span class="string">""</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (browser.versions.android) &#123;</div><div class="line"><span class="comment">//说明是Android系统</span></div><div class="line"><span class="built_in">window</span>.location.href=<span class="string">""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[其他css问题]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/09/14/%E5%85%B6%E4%BB%96css%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool" target="_blank" rel="external">更多参见阮老师blog</a><br>1.意为弹性布局，块元素：display:flex;行内元素：display:inline-flex;<br>2.不同内核浏览器需要加前缀区分，如：display:-webkit-flex; /<em>Safari</em>/<br>3.设为flex布局后，子元素的float,clear,vertical-align属性将失效。<br>4.flex属性：<br>1）flex-direction:row（默认值）：主轴为水平方向，起点在左端。<br>                  row-reverse：主轴为水平方向，起点在右端。<br>                  column：主轴为垂直方向，起点在上沿。<br>                  column-reverse：主轴为垂直方向，起点在下沿<br>2)flex-wrap属性: nowrap（默认）：不换行。<br>                wrap：换行，第一行在上方。<br>                wrap-reverse：换行，第一行在下方。<br>3)flex-flow：属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。<br>4)justify-content:flex-start | flex-end | center | space-between | space-around<br>5)align-items: flex-start | flex-end | center | baseline | stretch;</p>
<h3 id="清除所有a标签在点击时出现的特效"><a href="#清除所有a标签在点击时出现的特效" class="headerlink" title="清除所有a标签在点击时出现的特效"></a>清除所有a标签在点击时出现的特效</h3><blockquote>
<p>清除所有a标签在点击时出现的特效：a{ -webkit-tap-highlight-color:rgba(255,0,0,0);}</p>
</blockquote>
<h3 id="文字与图片不能垂直居中对齐"><a href="#文字与图片不能垂直居中对齐" class="headerlink" title="文字与图片不能垂直居中对齐"></a>文字与图片不能垂直居中对齐</h3><blockquote>
<p>给图片添加css样式<br>vertical-align:text-bottom；<br>vertical-align只适用于行内块元素</p>
</blockquote>
<h3 id="img标签和同级div之间的间隙处理"><a href="#img标签和同级div之间的间隙处理" class="headerlink" title="img标签和同级div之间的间隙处理"></a>img标签和同级div之间的间隙处理</h3><blockquote>
<p>给img标签设置 vertical-align:top;display:block;</p>
</blockquote>
<h3 id="在移动端手机APP中禁止长按来阻止其他手机自带默认事件（如：iPhone的3Dtouch）"><a href="#在移动端手机APP中禁止长按来阻止其他手机自带默认事件（如：iPhone的3Dtouch）" class="headerlink" title="在移动端手机APP中禁止长按来阻止其他手机自带默认事件（如：iPhone的3Dtouch）"></a>在移动端手机APP中禁止长按来阻止其他手机自带默认事件（如：iPhone的3Dtouch）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">touch-callout: none;</div><div class="line">-webkit-touch-callout: none;</div><div class="line">-webkit-user-select: none;</div><div class="line">user-select: none;</div></pre></td></tr></table></figure>
<h3 id="文本超出后显示省略号"><a href="#文本超出后显示省略号" class="headerlink" title="文本超出后显示省略号"></a>文本超出后显示省略号</h3><blockquote>
<p>p{<br>   width:40px;<br>   white-space: nowrap;<br>   text-overflow: ellipsis;<br>   overflow: hidden;<br>}</p>
</blockquote>
<p>p{<br>    overflow: hidden;                //超出部分隐藏<br>    text-overflow: ellipsis;         //显示省略号来修饰被剪掉的文本<br>    display: box;<br>    display: -webkit-box;<br>    line-clamp: 3;                     //非规范属性，实现规定文本行数      火狐不支持这个属性<br>    -webkit-line-clamp: 3;<br>    -webkit-box-orient: vertical;    //规定框的子元素应该被水平或垂直排列<br>    -moz-box-orient: vertical;        //支持火狐的写法<br>} </p>
<h3 id="自定义光标"><a href="#自定义光标" class="headerlink" title="自定义光标"></a>自定义光标</h3><blockquote>
<p>cursor: url(/路径/cursor.cur),auto;        后缀似乎必须为cur</p>
</blockquote>
<h3 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h3><blockquote>
<p>IE：不管该行有没有文字，光标高度与font-size一致。</p>
</blockquote>
<p>FF：该行有文字时，光标高度与font-size一致。该行无文字时，光标高度与input的height一致。</p>
<p>Chrome：该行无文字时，光标高度与line-height一致；该行有文字时，光标高度从input顶部到文字底部(这两种情况都是在有设定line-height的时候)，如果没有line-height，则是与font-size一致。</p>
<p>解决的方案：</p>
<p>给input的height设定一个较小的高度，然后用padding去填充，基本上可以解决所有浏览器的问题</p>
<h3 id="文字竖排排列显示方案"><a href="#文字竖排排列显示方案" class="headerlink" title="文字竖排排列显示方案"></a>文字竖排排列显示方案</h3><p>1.writing-mode:lr-tb或writing-mode:tb-rl<br>  参数：<br>    <1>、lr-tb：从左向右，从上往下<br>    <2>、tb-rl：从上往下，从右向左<br>    运行代码发现，IE显示正常，火狐、谷歌浏览器却不支持，所以不建议使用writing-mode属性。<br>2.对文字对象宽度设置只能排下一个文字的宽度距离，让文字一行排不下两个文字使其文字自动换行，就形成了竖立排版需求。<br>3.利用html br换行标签实现文字换行，对每个文字后加上换行br标签让其竖列排版。</2></1></p>
<h3 id="ios下input样式问题"><a href="#ios下input样式问题" class="headerlink" title="ios下input样式问题"></a>ios下input样式问题</h3><p>1.ios下如果想要禁用input,input设置为readonly仍然会呼起键盘，所以必须设置disabled属性。<br>2.ios下设置为disabled属性，input表单背景颜色会变灰，透明度会降低，所以，必须设置<br>    input:disabled{<br>       opacity:1;<br>       bakcground:#fff;<br>    }</p>
<h3 id="css3滤镜效果：-webkit-filter"><a href="#css3滤镜效果：-webkit-filter" class="headerlink" title="css3滤镜效果：-webkit-filter"></a>css3滤镜效果：-webkit-filter</h3><p><a href="">http://www.css88.com/html5-demo/-webkit-filter/index.html</a></p>
<h3 id="字体抗锯齿效果"><a href="#字体抗锯齿效果" class="headerlink" title="字体抗锯齿效果"></a>字体抗锯齿效果</h3><p>Webkit在自己的引擎中支持了这一效果。<br>-webkit-font-smoothing<br>它有三个属性值：<br>none —— 对低像素的文本比较好<br>subpixel-antialiased——默认值<br>antialiased ——抗锯齿很好<br>.icon {</p>
<p>-webkit-font-smoothing: antialiased;</p>
<p>-moz-osx-font-smoothing: grayscale;  //Gecko也推出了自己的抗锯齿效果的非标定义</p>
<p>}</p>
<h3 id="弹层出现禁用背景body滚动条"><a href="#弹层出现禁用背景body滚动条" class="headerlink" title="弹层出现禁用背景body滚动条"></a>弹层出现禁用背景body滚动条</h3><p>height:100%;overscroll:hidden;<br>touch-action:none;//禁止触发默认的手势操作。<br>pan-x：可以在父级元素(the nearest ancestor)内进行水平移动的手势操作。<br>pan-y：可以在父级元素内进行垂直移动的手势操作。<br>manipulation：允许手势水平/垂直平移或持续的缩放。任何auto属性支持的额外操作都不支持；<br>注：touch-action只支持具有行内块，块级的元素</p>
<h3 id="CSS控制输入文本大小写"><a href="#CSS控制输入文本大小写" class="headerlink" title="CSS控制输入文本大小写"></a>CSS控制输入文本大小写</h3><blockquote>
<p>text-transform：none；capitalize；uppercase；lowercase；inherit；<br>none默认。定义带有小写字母和大写字母的标准的文本。<br>capitalize文本中的每个单词以大写字母开头。<br>uppercase定义仅有大写字母。lowercase定义无大写字母，仅有小写字母。<br>inherit规定应该从父元素继承 text-transform 属性的值。</p>
</blockquote>
<h3 id="控制input标签的placeholder属性实现获取焦点显示暗文，失去焦点隐藏-其实就是改变placeholder中的文字颜色"><a href="#控制input标签的placeholder属性实现获取焦点显示暗文，失去焦点隐藏-其实就是改变placeholder中的文字颜色" class="headerlink" title="控制input标签的placeholder属性实现获取焦点显示暗文，失去焦点隐藏(其实就是改变placeholder中的文字颜色)"></a>控制input标签的placeholder属性实现获取焦点显示暗文，失去焦点隐藏(其实就是改变placeholder中的文字颜色)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&amp;::-webkit-input-placeholder &#123; color:transparent; &#125;</div><div class="line">&amp;:-moz-placeholder &#123; color:transparent; &#125;</div><div class="line">&amp;::-moz-placeholder &#123; color:transparent; &#125;</div><div class="line">&amp;:-ms-input-placeholder &#123; color:transparent;&#125;</div><div class="line">&amp;:focus::-webkit-input-placeholder &#123; color:#9fb0bf; &#125;</div><div class="line">&amp;:focus:-moz-placeholder &#123; color:#9fb0bf; &#125;</div><div class="line">&amp;:focus::-moz-placeholder &#123; color:#9fb0bf; &#125;</div><div class="line">&amp;:focus:-ms-input-placeholder &#123; color:#9fb0bf; &#125;</div></pre></td></tr></table></figure>
<h3 id="will-change提高页面滚动、动画等渲染性能css3"><a href="#will-change提高页面滚动、动画等渲染性能css3" class="headerlink" title="will-change提高页面滚动、动画等渲染性能css3"></a>will-change提高页面滚动、动画等渲染性能css3</h3><p>参考张鑫旭blog:<br><a href="">http://www.zhangxinxu.com/wordpress/2015/11/css3-will-change-improve-paint/</a></p>
<h3 id="支持webkit内核浏览器的滚动条样式自定义"><a href="#支持webkit内核浏览器的滚动条样式自定义" class="headerlink" title="支持webkit内核浏览器的滚动条样式自定义"></a>支持webkit内核浏览器的滚动条样式自定义</h3><blockquote>
<p>::-webkit-scrollbar{/<em> 1 </em>/} /<em>滚动条垂直方向的宽度与水平方向的高度</em>/ ::-webkit-scrollbar-button{/<em> 2 </em>/} /<em>滚动条按钮</em>/ ::-webkit-scrollbar-track{/<em> 3 </em>/} /<em>滚动条轨道</em>/ ::-webkit-scrollbar-track-piece{/<em> 4 </em>/} /<em>滚动条垂直方向轨道件</em>/ ::-webkit-scrollbar-thumb{/<em> 5 </em>/} /<em>滚动条轨道上的按钮</em>/ ::-webkit-scrollbar-corner{/<em> 6 </em>/} /<em>滚动条轨道上的滚动角</em>/ </p>
</blockquote>
<h3 id="ios在fixed布局下出现bug问题"><a href="#ios在fixed布局下出现bug问题" class="headerlink" title="ios在fixed布局下出现bug问题"></a>ios在fixed布局下出现bug问题</h3><p>软键盘唤起后，页面的fixed 元素将失效（即无法浮动，也可以理解为变成了absolute定位），所以当页面超过一屏且滚动时，失效的 fixed 元素就会跟随滚动了。<br>这便是 iOS 上 fixed 元素和输入框的 bug 。其中不仅限于 type=text 的输入框，凡是软键盘（比如时间日期选择、select 选择等等）被唤起，都会遇到同样地问题。<br>解决方法：<br>    将原 body 滚动的区域域移到 main 内部，而 header 和footer 的样式不变。<br>.main{<br>    position: absolute;<br>    top: 50px;<br>    bottom: 34px;<br>    overflow-y: scroll;<br>}<br>.main  .content {<br>    height: 2000px;<br>}</p>
<p>这样布局可能会是的滚动失去原来的流畅，加以下代码，恢复之前丝滑般的滚动：<br>    -webkit-overflow-scrolling: touch;</p>
<p>这样的布局在h5是行不通的，所以需要用JS来控制内部滚动元素的高度：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> 内部滚动</div><div class="line"><span class="keyword">var</span> w = <span class="built_in">window</span>.innerWidth,</div><div class="line">        h = <span class="built_in">window</span>.innerHeight;  <span class="comment">//获取窗口的高度与宽度(不包含工具条与滚动条):</span></div><div class="line">    $(<span class="string">'#js_orderConWrap'</span>).height(h - $(<span class="string">'.cm-header-wrap'</span>).height());  <span class="comment">//内部元素的高度 = 窗口高度 - 头部或底部的高度(如果有)</span></div><div class="line"></div><div class="line"><span class="comment">//既然都在h5了，所以还要考虑APP环境，在APP环境下头部是不会用h5的，所以需要判断h5和APP环境；</span></div><div class="line"></div><div class="line"><span class="number">2.</span>弹层显示，禁止背景滚动</div><div class="line"><span class="comment">//关闭滚动条</span></div><div class="line">        $(<span class="built_in">document</span>).on(<span class="string">'touchmove'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>($(<span class="string">'.app-popup-container'</span>).css(<span class="string">'display'</span>) === <span class="string">'block'</span>)&#123;</div><div class="line">                e.preventDefault();</div><div class="line">            &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[undefined]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/09/14/undefined/</url>
      <content type="html"><![CDATA[<h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> $scope.mobile == <span class="string">"undefined"</span>) &#123;</div><div class="line">            $scope.mobile = <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">或者</div><div class="line"></div><div class="line"><span class="keyword">if</span>( $scope.mobile == <span class="literal">undefined</span> )&#123;</div><div class="line">    $scope.mobile = <span class="string">""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于表单]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/09/14/%E5%85%B3%E4%BA%8E%E8%A1%A8%E5%8D%95/</url>
      <content type="html"><![CDATA[<h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><blockquote>
<p>关于input表单的一些样式和JS问题：<br>input的placeholder属性字体颜色：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#aaa</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-moz-placeholder</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#aaa</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-moz-placeholder</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#aaa</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-ms-input-placeholder</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#aaa</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>input的选中状态：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123; <span class="attribute">border</span>:<span class="number">1px</span> solid red &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cookie]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/09/14/cookie/</url>
      <content type="html"><![CDATA[<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置cookie  </span></div><div class="line"><span class="comment">//name是cookie中的名，value是对应的值，iTime是多久过期（单位为天）  </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name,value,iTime</span>)</span>&#123;  </div><div class="line">    <span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();  </div><div class="line">    <span class="comment">//设置cookie过期时间  </span></div><div class="line">    oDate.setDate(oDate.getDate()+iTime);  </div><div class="line">    <span class="built_in">document</span>.cookie = name+<span class="string">'='</span>+value+<span class="string">';expires='</span>+oDate.toGMTString();  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//获取cookie  </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>)</span>&#123;  </div><div class="line">    <span class="comment">//cookie中的数据都是以分号加空格区分开  </span></div><div class="line">    <span class="keyword">var</span> arr = <span class="built_in">document</span>.cookie.split(<span class="string">"; "</span>);  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;  </div><div class="line">        <span class="keyword">if</span>(arr[i].split(<span class="string">"="</span>)[<span class="number">0</span>] == name)&#123;  </div><div class="line">            <span class="keyword">return</span> arr[i].split(<span class="string">"="</span>)[<span class="number">1</span>];  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">//未找到对应的cookie则返回空字符串  </span></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//删除cookie  </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeCookie</span>(<span class="params">name</span>)</span>&#123;  </div><div class="line">    <span class="comment">//调用setCookie方法，把时间设置为-1  </span></div><div class="line">    setCookie(name,<span class="number">1</span>,<span class="number">-1</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于em rem px]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/09/14/%E5%85%B3%E4%BA%8Eem%20rem%20px/</url>
      <content type="html"><![CDATA[<h3 id="px-em-rem"><a href="#px-em-rem" class="headerlink" title="px em rem"></a>px em rem</h3><blockquote>
<p>1.em<br>一般都是 body 的 font-size 为基准，例如：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">62.5%</span>;</div><div class="line">    <span class="comment">/*10 ÷ 16 × 100% = 62.5%*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">2.4em</span>;</div><div class="line">    <span class="comment">/*2.4em × 10 = 24px */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>计算公式：1 ÷ 父元素的font-size × 需要转换的像素值 = em值</p>
<p>2.rem<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">62.5%</span>;</div><div class="line">    <span class="comment">/*10 ÷ 16 × 100% = 62.5%*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">1.4rem</span>;</div><div class="line">    <span class="comment">/*1.4 × 10px = 14px */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">2.4rem</span>;</div><div class="line">    <span class="comment">/*2.4 × 10px = 24px*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo强力搭建github博客]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/09/14/hexo%E5%BC%BA%E5%8A%9B%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h1><p>不知道亚林兄借鉴谁的，但是我是借鉴亚林兄的，版权所有，归他</p>
<a id="more"></a>
<p>如果是小小白，可以先花时间去了解下：</p>
<ul>
<li><a href="http://git-scm.com/book/zh/v2" target="_blank" rel="external">Git</a></li>
<li><a href="https://github.com/" target="_blank" rel="external">GitHub</a></li>
<li><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a></li>
<li><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a></li>
<li><a href="http://www.appinn.com/markdown/#autoescape" target="_blank" rel="external">Markdown</a></li>
</ul>
<h1 id="二、-必要配置"><a href="#二、-必要配置" class="headerlink" title="二、 必要配置"></a>二、 必要配置</h1><h2 id="2-1-GitHub-Pages-仓库"><a href="#2-1-GitHub-Pages-仓库" class="headerlink" title="2.1 GitHub Pages 仓库"></a>2.1 GitHub Pages 仓库</h2><h3 id="2-1-1-创建对应仓库"><a href="#2-1-1-创建对应仓库" class="headerlink" title="2.1.1 创建对应仓库"></a>2.1.1 创建对应仓库</h3><p>在自己的GitHub账号下创建一个新的仓库，命名为blog。</p>
<h2 id="2-2-Git"><a href="#2-2-Git" class="headerlink" title="2.2 Git"></a>2.2 Git</h2><h3 id="2-2-1-安装-Git"><a href="#2-2-1-安装-Git" class="headerlink" title="2.2.1 安装 Git"></a>2.2.1 安装 Git</h3><p>在windows下安装git比较常用的有两种方式：</p>
<ol>
<li><a href="http://git-scm.com/download/win" target="_blank" rel="external">Git 官方版本的安装</a></li>
<li><a href="https://desktop.github.com/" target="_blank" rel="external">GitHub for Windows</a></li>
</ol>
<h3 id="2-2-2-配置-Git"><a href="#2-2-2-配置-Git" class="headerlink" title="2.2.2 配置 Git"></a>2.2.2 配置 Git</h3><p>当安装完Git应该做的第一件事情就是设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"username"</span></div><div class="line">$ git config --global user.email <span class="string">"username@example.com"</span></div></pre></td></tr></table></figure>
<h3 id="2-2-3-相关资料"><a href="#2-2-3-相关资料" class="headerlink" title="2.2.3 相关资料"></a>2.2.3 相关资料</h3><ul>
<li><a href="http://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="external">安装 Git</a></li>
<li><a href="http://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE" target="_blank" rel="external">配置 Git</a></li>
</ul>
<h2 id="2-3-Git-与-GitHub"><a href="#2-3-Git-与-GitHub" class="headerlink" title="2.3 Git 与 GitHub"></a>2.3 Git 与 GitHub</h2><h3 id="2-3-1-git与github的区别"><a href="#2-3-1-git与github的区别" class="headerlink" title="2.3.1 git与github的区别"></a>2.3.1 git与github的区别</h3><p>这里，我们要区分清楚git与github。</p>
<p>git是一个版本控制的工具，而github有点类似于远程仓库，用于存放用git管理的各种项目。</p>
<h3 id="2-3-2-与github建立联系"><a href="#2-3-2-与github建立联系" class="headerlink" title="2.3.2 与github建立联系"></a>2.3.2 与github建立联系</h3><p>为了能够在本地使用git管理github上的项目，需要进行一些配置，这里介绍SSH的方法。</p>
<h4 id="2-3-2-1-检查电脑是否已经有SSH-keys。"><a href="#2-3-2-1-检查电脑是否已经有SSH-keys。" class="headerlink" title="2.3.2.1 检查电脑是否已经有SSH keys。"></a>2.3.2.1 检查电脑是否已经有SSH keys。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls -al ~/.ssh</div><div class="line"><span class="comment"># Lists the files in your .ssh directory, if they exist</span></div></pre></td></tr></table></figure>
<p>默认情况下，public keys的文件名是以下的格式之一：id_dsa.pub、id_ecdsa.pub、id_ed25519.pub、id_rsa.pub。因此，如果列出的文件有public和private钥匙对（例如id_ras.pub和id_rsa），证明已存在SSH keys。</p>
<h4 id="2-3-2-2-如果没有SSH-key，则生成新的SSH-key。"><a href="#2-3-2-2-如果没有SSH-key，则生成新的SSH-key。" class="headerlink" title="2.3.2.2 如果没有SSH key，则生成新的SSH key。"></a>2.3.2.2 如果没有SSH key，则生成新的SSH key。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></div><div class="line"><span class="comment"># Creates a new ssh key, using the provided email as a label</span></div></pre></td></tr></table></figure>
<p>之后一路回车即可。</p>
<h4 id="2-3-2-3-向ssh-agent添加key。"><a href="#2-3-2-3-向ssh-agent添加key。" class="headerlink" title="2.3.2.3 向ssh-agent添加key。"></a>2.3.2.3 向ssh-agent添加key。</h4><p>首先确保ssh-agent可运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># start the ssh-agent in the background</span></div><div class="line">$ ssh-agent <span class="_">-s</span></div></pre></td></tr></table></figure></p>
<p>然后添加SSH key：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p>
<h4 id="2-3-2-4-在GitHub添加SSH-key。"><a href="#2-3-2-4-在GitHub添加SSH-key。" class="headerlink" title="2.3.2.4 在GitHub添加SSH key。"></a>2.3.2.4 在GitHub添加SSH key。</h4><p>首先，拷贝key：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">clip &lt; ~/.ssh/id_rsa.pub</div><div class="line"><span class="comment"># Copies the contents of the id_rsa.pub file to your cllipboard</span></div></pre></td></tr></table></figure></p>
<p>然后，在GitHub右上方点击头像，选择”Settings”，在左边的”SSH and GPG keys”侧边栏选择”New SSH key”。接着粘贴key，点击”Add key”按钮。最后，测试链接：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div><div class="line"><span class="comment"># Attempts to ssh to GitHub</span></div></pre></td></tr></table></figure></p>
<p>如果你看到：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity of host <span class="string">'github.com (207.97.227.239)'</span> can<span class="string">'t be established.</span></div><div class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</div><div class="line">Are you sure you want to continue connecting (yes/no)?</div></pre></td></tr></table></figure></p>
<p>就键入：yes。之后将会看到如下信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hi username! You<span class="string">'ve successfully authenticated, but GitHub does not</span></div><div class="line">provide shell access.</div></pre></td></tr></table></figure></p>
<h3 id="2-3-3-相关资料"><a href="#2-3-3-相关资料" class="headerlink" title="2.3.3 相关资料"></a>2.3.3 相关资料</h3><ul>
<li><a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">Generating SSH keys</a></li>
</ul>
<h2 id="2-4-Hexo"><a href="#2-4-Hexo" class="headerlink" title="2.4 Hexo"></a>2.4 Hexo</h2><h3 id="2-4-1-安装Hexo"><a href="#2-4-1-安装Hexo" class="headerlink" title="2.4.1 安装Hexo"></a>2.4.1 安装Hexo</h3><p>安装Hexo相当简单。在安装之前，必须检查电脑中是否已经安装下列应用程序：</p>
<ul>
<li><a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a></li>
<li><a href="http://git-scm.com/" target="_blank" rel="external">Git</a><br>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-4-2-使用Hexo建站"><a href="#2-4-2-使用Hexo建站" class="headerlink" title="2.4.2 使用Hexo建站"></a>2.4.2 使用Hexo建站</h3><p>安装完后，在你喜欢的文件夹内（例如f：\Blog），点击鼠标右键选择Git bash，输入以下指令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure>
<p>该命令会在目标文件夹内建立网站所需要的所有文件。接下来是安装依赖包：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>这样，我们就已经搭建起本地的Hexo博客了。可以先执行以下命令（在对应文件夹下），然后再浏览器输入localhost:4000查看。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>这个博客只是本地的，别人是浏览不了的，之后需要部署到GitHub上。</p>
<h3 id="2-4-3-相关资料"><a href="#2-4-3-相关资料" class="headerlink" title="2.4.3 相关资料"></a>2.4.3 相关资料</h3><ul>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo 官方文档</a></li>
</ul>
<h2 id="三、一般的搭建方法"><a href="#三、一般的搭建方法" class="headerlink" title="三、一般的搭建方法"></a>三、一般的搭建方法</h2><p>在上面，我们已经配置好了所需的所有东西，也成功地搭建了一个本地Hexo博客。现在，需要使用GitHub Pages搭建一个别人能够访问的Hexo博客了。</p>
<h3 id="3-1-使用默认theme"><a href="#3-1-使用默认theme" class="headerlink" title="3.1 使用默认theme"></a>3.1 使用默认theme</h3><p>我们继续使用上面的文件夹f:\Blog（也可以新建一个文件夹重新生成），然后编辑该文件夹下的_config.yml。</p>
<p>默认生成的_config.yml：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>:</div></pre></td></tr></table></figure></p>
<p>修改后的_config.yml：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: 对应仓库的https地址（可以在GitHub对应的仓库中复制）</div><div class="line">  branch: 分支（User Pages为master，Project Pages为gh-pages）</div></pre></td></tr></table></figure></p>
<ul>
<li>注意：冒号后面要加上一个空格，否则会报错。</li>
</ul>
<p>如果你的仓库不是使用的github的主仓库，则需要改_config.yml的root：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># URL</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line">url: http://yoursite.com</div><div class="line">root: /blog/</div><div class="line">permalink: :year/:month/:day/:title/</div><div class="line">permalink_defaults:</div></pre></td></tr></table></figure>
<p>为了能够使Hexo部署到GitHub上，需要安装一个插件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>然后，执行下列指令即可完成部署：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>如果 hexo deploy 报错，请在Git Bash里边打开重新走上面两步</p>
<p>之后，可以通过在浏览器键入：username.github.io/blog进行浏览，开心吧~</p>
<h3 id="3-2-其他theme"><a href="#3-2-其他theme" class="headerlink" title="3.2 其他theme"></a>3.2 其他theme</h3><p>如果想要使用其他主题，可以使用git clone将别人的主题拷贝到D:\Hexo\themes下，然后将_config.yml中的theme: landscape改为对应的主题名字。</p>
<p>详细步骤可以参考网上的指南。</p>
<p>提示：上述搭建步骤大量参考了yangruihan的博客，如果你对搭建过程还有疑问，可以查看他的博文<a href="http://sunwhut.com/2015/10/30/buildBlog/" target="_blank" rel="external">如何利用GitHub Pages和Hexo快速搭建个人博客</a></p>
<h3 id="3-3-发表博文"><a href="#3-3-发表博文" class="headerlink" title="3.3 发表博文"></a>3.3 发表博文</h3><p>辛苦了这么久，终于回到我们搭建博客最初的目标–写作，现在来看看怎么写博文并发表吧。</p>
<h4 id="3-3-1-新建博文"><a href="#3-3-1-新建博文" class="headerlink" title="3.3.1 新建博文"></a>3.3.1 新建博文</h4><p>我们可以使用命令新建一篇博文,使用 Git Shell 进入 Hexo 文件夹，输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"文章题目"</span></div></pre></td></tr></table></figure>
<ul>
<li><p>命令执行完后，就会发现在 Hexo\source_posts 目录中多了一个文件博文名.md，这就是我们刚才新建的博文。</p>
</li>
<li><p>此外，我们也可以直接进入 Hexo\source_posts 目录中，右键新建一个文本文档，将名字改为博文名.md,这样也新建了一篇博文。</p>
</li>
</ul>
<h4 id="3-3-2-新建页面"><a href="#3-3-2-新建页面" class="headerlink" title="3.3.2 新建页面"></a>3.3.2 新建页面</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page <span class="string">"页面名称"</span></div></pre></td></tr></table></figure>
<ul>
<li>命令执行完后，就会发现在在 Hexo\source 目录中多了一个文件夹，里面还有一个index.md,这就代表我们新建了一个页面。</li>
</ul>
<h3 id="3-4-写博文"><a href="#3-4-写博文" class="headerlink" title="3.4 写博文"></a>3.4 写博文</h3><p>用文本编辑器打开上面新建的博文，如下所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: GitHub Pages + Hexo搭建博客</div><div class="line">date: 2016-08-07 17:04:35</div><div class="line">tags:</div><div class="line">categories: Hexo</div><div class="line">---</div></pre></td></tr></table></figure></p>
<ul>
<li><p>新建的页面略有不同，没有tags和categories标签。</p>
</li>
<li><p>三个”-“后面就是博文的正文内容，接下来就是正儿八经地撰写博文了。</p>
</li>
<li>因为我们的博文都是用Markdown语言写的，所以首先，你需要一个好用的Markdown编辑器。其实好用的Markdown编辑器一大堆，这里就给大家推荐两个，如果你用的不习惯也可以换其它的。</li>
<li>本地编辑器：<a href="http://sunwhut.com/2015/10/30/buildBlog/" target="_blank" rel="external">Haroopad</a>,非常小众的一款Markdown编辑器，左边编辑右边实时预览效果，非常轻便；</li>
<li>在线编辑器：<a href="http://mahua.jser.me/" target="_blank" rel="external">MaHua</a>,也是比较小众的一款Markdown编辑器，但效果确实很棒。</li>
<li>现在你可以打开新建的博文了，然而还不造怎么下手对吧。其实很简单，除了特殊格式，其它的你就当做在word里面写文章就行了，具体请看这里的Markdown教程：<a href="http://www.jianshu.com/p/1e402922ee32/#" target="_blank" rel="external">Markdown——入门指南</a>.<h3 id="3-5-发博文"><a href="#3-5-发博文" class="headerlink" title="3.5 发博文"></a>3.5 发博文</h3></li>
</ul>
<p>博文写好了，依然在 Git Shell 中进入 Hexo 文件夹，执行下面几条命令，将博客部署到 GitHub 上：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo generate (若要本地预览就先执行 hexo server)</div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">快捷命令：</div><div class="line">hexo g == hexo generate</div><div class="line">hexo d == hexo deploy</div><div class="line">hexo s == hexo server</div><div class="line">hexo n == hexo new</div></pre></td></tr></table></figure>
<p>还能组合使用，如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure>
<p>刷新你的个人博客，就可以看到新鲜出炉的博文了。</p>
<h2 id="四、安装主题"><a href="#四、安装主题" class="headerlink" title="四、安装主题"></a>四、安装主题</h2><h3 id="4-1-选择主题"><a href="#4-1-选择主题" class="headerlink" title="4.1 选择主题"></a>4.1 选择主题</h3><p>我们刚才使用Hexo生成的博客使用的是Hexo的默认主题：Landscape。</p>
<p>不过hexo 给我们提供了大量的主题，<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">Themes·Hexo</a> 我选择的是这个主题：NexT。</p>
<h3 id="4-2-安装NexT主题"><a href="#4-2-安装NexT主题" class="headerlink" title="4.2 安装NexT主题"></a>4.2 安装NexT主题</h3><p>Hexo 有两份主要的配置文件<code>_config.yml</code>，一份位于站点根目录下，另一份位于主题目录下。为了描述方便，在以下说明中，将前者称为 <code>站点配置文件</code>，后者称为 <code>主题配置文件</code>。</p>
<h4 id="4-2-1-下载-NexT-主题"><a href="#4-2-1-下载-NexT-主题" class="headerlink" title="4.2.1 下载 NexT 主题"></a>4.2.1 下载 NexT 主题</h4><p>使用 Git Shell 进入 Hexo 文件夹，输入以下两条命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> Hexo</div><div class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>
<h4 id="4-2-2-启用NexT主题"><a href="#4-2-2-启用NexT主题" class="headerlink" title="4.2.2 启用NexT主题"></a>4.2.2 启用NexT主题</h4><p>下载完成后，打开 <code>站点配置文件</code>，找到 theme 字段，并将其值更改为 next。</p>
<h4 id="4-2-3-验证主题是否启用"><a href="#4-2-3-验证主题是否启用" class="headerlink" title="4.2.3 验证主题是否启用"></a>4.2.3 验证主题是否启用</h4><p>执行上面发博文的命令($ hexo d -g)，刷新你的个人博客，就能看到你设置的主题是否启用。</p>
<h3 id="4-3-设置NexT主题和第三方服务"><a href="#4-3-设置NexT主题和第三方服务" class="headerlink" title="4.3 设置NexT主题和第三方服务"></a>4.3 设置NexT主题和第三方服务</h3><p>安装完NexT之后，还是发现不够漂亮对不对，所以下面我们来慢慢地润色你的个人博客。</p>
<h4 id="4-3-1-选择样式"><a href="#4-3-1-选择样式" class="headerlink" title="4.3.1 选择样式"></a>4.3.1 选择样式</h4><p>NexT默认的样式其实也比较丑，幸好作者提供了一款十分漂亮的样式:Mist。启用 Mist 很简单，仅需在 <code>主题配置文件</code>中将 #scheme: Mist 前面的 # 注释去掉即可。</p>
<h4 id="4-3-2-菜单设置"><a href="#4-3-2-菜单设置" class="headerlink" title="4.3.2 菜单设置"></a>4.3.2 菜单设置</h4><p>菜单配置在 主题配置文件 的 menu，下面是菜单配置示例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  <span class="comment">#home: /</span></div><div class="line">  archives: /archives</div><div class="line">  about: /about</div><div class="line">  categories: /categories</div><div class="line">  tags: /tags</div><div class="line">  <span class="comment">#commonweal: /404.html</span></div></pre></td></tr></table></figure>
<ul>
<li>除了home和archives菜单主题自带，其他菜单需要自己建文件夹，非常简单的还是；<br>其它的很多在<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT官方文档</a>里面已经讲的很清楚了,可以自己去研究研究。<h2 id="五、-优化部署与管理"><a href="#五、-优化部署与管理" class="headerlink" title="五、 优化部署与管理"></a>五、 优化部署与管理</h2></li>
</ul>
<h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>Hexo部署到GitHub上的文件，是.md（你的博文）转化之后的.html（静态网页）。因此，当你重装电脑或者想在不同电脑上修改博客时，就不可能了（除非你自己写html o(^▽^)o ）。</p>
<p>其实，Hexo生成的网站文件中有.gitignore文件，因此它的本意也是想我们将Hexo生成的网站文件存放到GitHub上进行管理的（而不是用U盘或者云备份啦。这样，不仅解决了上述的问题，还可以通过git的版本控制追踪你的博文的修改过程，是极赞的。</p>
<p>但是，如果每一个GitHub Pages都需要创建一个额外的仓库来存放Hexo网站文件，我感觉很麻烦（10个项目需要20个仓库(ˉ▽ˉ；)…）。</p>
<p>所以，我利用了分支！！！</p>
<p>简单地说，每个想建立GitHub Pages的仓库，起码有两个分支，一个用来存放Hexo网站的文件，一个用来发布网站。</p>
<p>下面以我的博客作为例子详细地讲述。</p>
<h3 id="5-2-我的博客搭建流程"><a href="#5-2-我的博客搭建流程" class="headerlink" title="5.2 我的博客搭建流程"></a>5.2 我的博客搭建流程</h3><ol>
<li>github创建仓库，blog</li>
<li>在本地新建的/blog文件夹中运行Git Bash,输入git init(在当前目录新建一个Git代码库);</li>
<li>接着命令行输入git remote add origin <a href="https://github.com/用户名/仓库名.git" target="_blank" rel="external">https://github.com/用户名/仓库名.git</a></li>
<li>依次执行git add .、git commit -m “…”、git push origin master提交网站相关的文件；<br>PS: 我是在gh-pages分支上改的，所以提交代码时会提示github上没有master分支，然后点击确定会帮你创建一个master分支，就可以提交成功了；</li>
</ol>
<p>这样一来，在GitHub上的gxhpersonal.github.io仓库就有两个分支，一个master分支用来存放网站的原始文件，一个gh-pages分支用来存放生成的静态网页。完美( •̀ ω •́ )y！</p>
<h3 id="5-3-我的博客管理流程"><a href="#5-3-我的博客管理流程" class="headerlink" title="5.3 我的博客管理流程"></a>5.3 我的博客管理流程</h3><h4 id="5-3-1-日常修改"><a href="#5-3-1-日常修改" class="headerlink" title="5.3.1 日常修改"></a>5.3.1 日常修改</h4><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理：</p>
<blockquote>
<p>个人习惯：</p>
<ol>
<li>先依次执行git add .、git commit -m “…”、git push origin master指令将改动推送到GitHub（此时当前分支应为master）；</li>
<li>然后才执行hexo generate -d发布网站到gh-pages分支上。</li>
<li>PS:其实gh-pages分支不用管的，当你运行hexo d -g 的时候就会把生成的博客代码自动提交到gh-pages分支;</li>
</ol>
</blockquote>
<p>虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。</p>
<h4 id="5-3-2-本地资料丢失"><a href="#5-3-2-本地资料丢失" class="headerlink" title="5.3.2 本地资料丢失"></a>5.3.2 本地资料丢失</h4><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p>
<ol>
<li>使用git clone git@github.com:gxhpersonal/blog.git拷贝仓库（默认分支为master）；</li>
<li>在本地新拷贝的blog文件夹下通过Git bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于angular个人遇到的问题]]></title>
      <url>http://gxhpersonal.github.io/blog/blog/2016/09/14/%E5%85%B3%E4%BA%8Eangular%E4%B8%AA%E4%BA%BA%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="关于ng-if"><a href="#关于ng-if" class="headerlink" title="关于ng-if"></a>关于ng-if</h3><blockquote>
<p>当一个元素需要隐藏和显示时，用ng-if的话，会出现其中包含的元素身上的方法无法正确调用的现象，所以，当元素中有方法时，最好使用 ng-show 和 ng-hide</p>
</blockquote>
<p>###动态插入的标签元素带有angular语法不执行解决<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var uploadInfo = &apos;上传成功！&lt;a ng-click=&quot;quitTo(&apos;customer&apos;)&quot;&gt;点击&lt;/a&gt;跳转到客户列表界面&apos;;</div><div class="line">angular.element(&apos;.modal-body&apos;).append(uploadInfo);</div></pre></td></tr></table></figure></p>
<p>将uploadInfo变量通过$compile进行处理，<br>var ele = $compile(uploadInfo)($scope);<br>angular.element(‘.modal-body’).append(ele);</p>
<p>###依赖注入<br>AngularJS提供了一种非常简单的解决方法，即将依赖作为一个数组传入，数组的最后一个元素是一个函数，所有的依赖项作为它的参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.controller(&apos;MainCtrl&apos;, [&apos;$scope&apos;, &apos;$timeout&apos;, function($scope, $timeout)&#123;</div><div class="line">    $timeout(function()&#123;</div><div class="line">        console.log($scope);</div><div class="line">    &#125;, 1000);</div><div class="line">&#125;]);</div></pre></td></tr></table></figure></p>
<h3 id="获取input焦点"><a href="#获取input焦点" class="headerlink" title="获取input焦点"></a>获取input焦点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.directive(<span class="string">'setFocus'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">scope, element</span>)</span>&#123;</div><div class="line">element[<span class="number">0</span>].focus();</div><div class="line">&#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="ng-repeat遍历数组"><a href="#ng-repeat遍历数组" class="headerlink" title="ng-repeat遍历数组"></a>ng-repeat遍历数组</h3><blockquote>
<p>ng-repeat遍历数组时，数组中有2个以上的相同数字，需要在 v in xxx 后面加上 track by $index；<br><a href="http://blog.csdn.net/rangqiwei/article/details/38020667" target="_blank" rel="external">详细解释：</a></p>
</blockquote>
<h3 id="ng-repeat遍历对象"><a href="#ng-repeat遍历对象" class="headerlink" title="ng-repeat遍历对象"></a>ng-repeat遍历对象</h3><blockquote>
<p>ng-repeat=”(key,value) in feesWays”<br>这种方式可以把接口数据对象格式的字段分离成键和值；</p>
</blockquote>
<h3 id="输出当前点击的对象属性值"><a href="#输出当前点击的对象属性值" class="headerlink" title="输出当前点击的对象属性值"></a>输出当前点击的对象属性值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">ng-app</span>=<span class="string">"toggleList"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">		<span class="selector-class">.error</span> &#123;</div><div class="line">			<span class="attribute">background-color</span>: red;</div><div class="line">		&#125;</div><div class="line">		<span class="selector-class">.warning</span> &#123;</div><div class="line">			<span class="attribute">background-color</span>: yellow;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"test"</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span> <span class="attr">id</span>=<span class="string">"js_link"</span> <span class="attr">ng-click</span>=<span class="string">"showMe($event)"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/angular.js/1.3.20/angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/angular.js/1.3.20/angular-animate.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="keyword">var</span> app = angular.module(<span class="string">'toggleList'</span>, [<span class="string">'ngAnimate'</span>]);</div><div class="line">		app.controller(<span class="string">"test"</span>, [<span class="string">"$scope"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">			$scope.showMe = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">				<span class="built_in">console</span>.log($(event.currentTarget).attr(<span class="string">"id"</span>))</div><div class="line">			&#125;</div><div class="line">		&#125;]);</div><div class="line"></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="跳转页面"><a href="#跳转页面" class="headerlink" title="跳转页面"></a>跳转页面</h3><blockquote>
<p>$scope.tiaozhuan = function(number){<br>window.location.href=”/xxx/xxx   (如果想要传ID或什么东西过去)  ?id=” + number;<br>}</p>
</blockquote>
<h3 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">//后台会传一个时间戳给你，只需要把这个时间戳转换为倒计时就行</span></div><div class="line">   $scope.daojishi = <span class="function"><span class="keyword">function</span> (<span class="params">activityendtime</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> time = $scope.time = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> count = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//计算剩下毫秒数</span></div><div class="line">        time.t = activityendtime;</div><div class="line">        time.d = <span class="built_in">Math</span>.floor(time.t / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</div><div class="line">        time.h = <span class="built_in">Math</span>.floor(time.t / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</div><div class="line">        time.m = <span class="built_in">Math</span>.floor(time.t / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>) &lt; <span class="number">10</span> ? <span class="string">'0'</span> + <span class="built_in">Math</span>.floor(time.t / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>) : <span class="built_in">Math</span>.floor(time.t / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>);</div><div class="line">        time.s = <span class="built_in">Math</span>.floor(time.t / <span class="number">1000</span> % <span class="number">60</span>) &lt; <span class="number">10</span> ? <span class="string">'0'</span> + <span class="built_in">Math</span>.floor(time.t / <span class="number">1000</span> % <span class="number">60</span>) : <span class="built_in">Math</span>.floor(time.t / <span class="number">1000</span> % <span class="number">60</span>);</div><div class="line">        <span class="keyword">if</span> (time.t &lt;= <span class="number">0</span>) &#123;</div><div class="line">            $scope.endShow = <span class="literal">true</span>;</div><div class="line">            $scope.overhtml = <span class="string">"活动已结束！"</span>;</div><div class="line">            $scope.endActivity = <span class="literal">true</span>;</div><div class="line">            $scope.timeOver = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span> (time.h &lt; <span class="number">0</span>) &#123;</div><div class="line">                time.h = <span class="string">'0'</span>;</div><div class="line">                time.m = <span class="string">'00'</span>;</div><div class="line">                time.s = <span class="string">'00'</span>;</div><div class="line">            &#125;</div><div class="line">            $(<span class="string">".count-down"</span>).hide();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            activityendtime = (time.t - <span class="number">1000</span>);</div><div class="line">        &#125;</div><div class="line">        $scope.Residualtime = time.d + <span class="string">":"</span> + time.h + <span class="string">":"</span> + time.m + <span class="string">":"</span> + time.s;</div><div class="line">    &#125;;</div><div class="line">    count();</div><div class="line">    <span class="keyword">var</span> stop = $interval(count, <span class="number">1000</span>);</div><div class="line">    $scope.$on(<span class="string">'$destroy'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $interval.cancel(stop);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">$scope.daojishi（$scope.activityendtime）</div></pre></td></tr></table></figure>
<h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><blockquote>
<p>angular中需要拼接字符串和变量时，用ng-xx方法，“”中写 字符串 ，就会解析为字符串</p>
</blockquote>
<h3 id="angularJS全局API"><a href="#angularJS全局API" class="headerlink" title="angularJS全局API"></a>angularJS全局API</h3><blockquote>
<p>angular.lowercase()    转换字符串为小写<br>angular.uppercase()    转换字符串为大写<br>angular.isString()    判断给定的对象是否为字符串，如果是返回 true。<br>angular.isNumber()    判断给定的对象是否为数字，如果是返回 true。</p>
</blockquote>
<p>###ng-bind-html=””<br>当想要呈现的后台文本中有HTML标签的时候，使用ng-bind-html来代替ng-bind，就能正常的使用想用的HTML标签了。但要注意文本中如果使用到符号的话，注意要转义符号。<br>但要注意文本中如果使用到符号的话,注意要转义符号<br>如: (1)  大于符号（&gt;）   —&gt; &gt;<br>      (2)  小于符号（&lt;）   —&gt; &lt;<br>否则系统报错<br>要使用：$sanitize服务<br>在angular.module中配置sanitize服务：var myApp = angular.module(‘myApp’, [‘ngSanitize’]);</p>
<script src="../js/angular-sanitize.js"></script>

<p>###angular自带遍历方法  angular.forEach<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> objs =[&#123;a:<span class="number">1</span>&#125;,&#123;a:<span class="number">2</span>&#125;];</div><div class="line">angular.forEach(objs, <span class="function"><span class="keyword">function</span>(<span class="params">data,index,array</span>)</span>&#123;</div><div class="line">        <span class="comment">//data等价于array[index]</span></div><div class="line">        <span class="built_in">console</span>.log(data.a+<span class="string">'='</span>+array[index].a);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="angularJS懒加载"><a href="#angularJS懒加载" class="headerlink" title="angularJS懒加载"></a>angularJS懒加载</h3><p>引入  angular-img-lazy-load.min.js</p>
<p>src-lazy=”“</p>
<p>var hzcApp = angular.module(“hzc_app”, [‘img-lazy-load’]);</p>
<blockquote>
<p>下面这个包含在controller中<br>hzcApp.constant(‘imgLazyLoadConf’, {<br>                tolerance: 50,<br>                detectElement: true<br>      })</p>
</blockquote>
<h3 id="directive"><a href="#directive" class="headerlink" title="directive"></a>directive</h3><p>2 . 在AngularJS中，操作DOM一般在指令中完成，事件监听机制是在对于已经静态生成的dom绑定事件，而如果在指令中动态生成了DOM节点，动态生成的节点不会被JS事件监听<br>angular.module(‘myapp’,[])<br>.directive(‘myText’,function($compile){<br>    var template:’<div ng-click="hello()">Hi everyone</div>‘,<br>    return{<br>        restrict:’A’,<br>        link:function(scope,ele,attr){<br>             ele.on(“click”, function() {<br>                scope.$apply(function() {<br>                    var content = $compile(template)(scope);<br>                    element.append(content);<br>               })<br>            });<br>        }<br>    }<br>}</p>
<h3 id="timeout-apply"><a href="#timeout-apply" class="headerlink" title="$timeout $apply"></a>$timeout $apply</h3><p>$timeout会帮你调用$apply()，让你不需要手动地调用它<br>$apply会吧我们的代码wrapped到了$scope.$apply()中，它会自动触发$rootScope.$digest()，从而让watchers被触发用以更新view</p>
<h3 id="ng-click方法函数中的this指向问题"><a href="#ng-click方法函数中的this指向问题" class="headerlink" title="ng-click方法函数中的this指向问题"></a>ng-click方法函数中的this指向问题</h3><blockquote>
<p>this指向当前controller中的$scope<br>比如：this.value = $scope.value;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ng-click中的this的特性在ng-repeat中非常好用。</div><div class="line">比如用ng-repeat遍历出一个列表：</div><div class="line">&lt;div ng-click=&quot;change()&quot; ng-repeat=&quot;item in items&quot;&gt;&#123;&#123;item.value&#125;&#125;&lt;/div&gt;</div><div class="line">然后你想给他们绑定一个统一的函数change()方法，点击之后只会把自己的值改变，此时this就是指向当前的子scope：</div><div class="line">$scope.change = function()&#123;</div><div class="line">    this.item.value = &apos;new value&apos;;</div><div class="line">    //由于是ng-repeat出来的，所以这里this指向的scope是上面那个案例中$scope的子集。</div><div class="line">    //即this.$parent === $scope;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="angular-cope-复制数组或对象"><a href="#angular-cope-复制数组或对象" class="headerlink" title="angular.cope()复制数组或对象"></a>angular.cope()复制数组或对象</h3>]]></content>
    </entry>
    
  
  
</search>
